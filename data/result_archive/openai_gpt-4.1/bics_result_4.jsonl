{"code": "\"\"\"\nFunction to find the combinations of sums with tuples in the given tuple list.\n\"\"\"\ndef find_combinations(tuples):\n    result = []\n    n = len(tuples)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            t1 = tuples[i]\n            t2 = tuples[j]\n            result.append((t1[0] + t2[0], t1[1] + t2[1]))\n            result.append((t2[0] + t1[0], t2[1] + t1[1]))\n    return result\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n):\n    res = 0\n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n        res = max(res, count)\n    return res\n\n\"\"\"\nFunction to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nPython function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) :\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i] != str2[i] :\n            count += 1\n    if count % 2 == 0 :\n        return (count // 2)\n    else :\n        return (\"Not Possible\")", "func_error": "find_combinations", "context_length": 500, "depth_percentage": 0, "guess": "subset", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nFunction to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1\n\n\"\"\"\nFunction to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n\n\"\"\"\nFunction to find common index elements from three lists.\n\"\"\"\ndef extract_index_list(a, b, c):\n    res = []\n    for i in range(min(len(a), len(b), len(c))):\n        if a[i] == b[i] == c[i]:\n            res.append(i)\n    return res\n\n\"\"\"\nPython function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nFunction to check if the string is a valid email address or not using regex.\n\"\"\"\nimport re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email):\n    if(re.search(regex,email)):\n        return (\"Valid Email\")\n    else:\n        return (\"Invalid Email\")\n\n\"\"\"\nFunction to find nth polite number.\n\"\"\"\nimport math\ndef is_polite(n):\n    n = n + 1\n    return (int)(n+(math.log((n + math.log(n, 2)), 2)))", "func_error": "extract_index_list", "context_length": 500, "depth_percentage": 25, "guess": "is_polite", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nFunction to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n\n\"\"\"\nFunction to check whether the given ip address is valid or not using regex.\n\"\"\"\nimport re\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\ndef check_IP(Ip):\n    if(re.search(regex, Ip)):\n        return (\"Valid IP address\")\n    else:\n        return (\"Invalid IP address\")\n\n\"\"\"\nFunction to find area of a sector.\n\"\"\"\ndef sector_area(r, angle):\n    if angle >= 360:\n        return None\n    from math import pi\n    return (pi * r * r * angle) / 180 / 2\n\n\"\"\"\nPython function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\nimport heapq\ndef cheap_items(items,n):\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items", "func_error": "sector_area", "context_length": 500, "depth_percentage": 50, "guess": "remove_even", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;\n\n\"\"\"\nFunction to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup)\n\n\"\"\"\nPython function to find the sum of an array.\n\"\"\"\ndef _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return(sum)\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nPython function to find minimum adjacent swaps required to sort binary array.\n\"\"\"\ndef find_Min_Swaps(arr, n):\n    ones_pos = [i for i, v in enumerate(arr) if v == 1]\n    min_swaps = 0\n    for idx, pos in enumerate(ones_pos):\n        min_swaps += pos - idx\n    return min_swaps\n\n\"\"\"\nFunction to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n  res = tuple(map(float, test_str.split(', ')))\n  return (res)", "func_error": "find_Min_Swaps", "context_length": 500, "depth_percentage": 75, "guess": "count_vowels", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nFunction to round up a number to specific digits.\n\"\"\"\nimport math\ndef round_up(a, digits):\n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nPython function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list):\n    for item in num_list:\n        if item < 0:\n           num_list.remove(item)\n    return num_list\n\n\"\"\"\nPython function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range (2,n + 1):\n        if(prime[i]):\n            sum += i\n    return sum\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nPython function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n, d):\n    num_bits = n.bit_length()\n    d = d % num_bits if num_bits else 0\n    return ((n << d) | (n >> (num_bits - d))) & ((1 << num_bits) - 1) if num_bits else 0", "func_error": "left_Rotate", "context_length": 500, "depth_percentage": 100, "guess": "remove_negs", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nPython function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(a, b, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid < len(b) and a[mid] == b[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n\"\"\"\nFunction to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n\n\"\"\"\nFunction to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;\n\n\"\"\"\nFunction to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):\n  count = tuplex.count(value)\n  return count\n\n\"\"\"\nFunction to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n\n\"\"\"\nFunction to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nPython function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end):\n    if (start > end):\n        return end + 1\n    if (start != array[start]):\n        return start;\n    mid = int((start + end) / 2)\n    if (array[mid] == mid):\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid)\n\n\"\"\"\nPython function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):\n    odd = 0\n    for i in range(n):\n        if (arr[i] % 2):\n            odd += 1\n    if (odd % 2):\n        return 1\n    return 2\n\n\"\"\"\nFunction to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n  res = set(test_tup2).issubset(test_tup1)\n  return (res)\n\n\"\"\"\nFunction to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "func_error": "find_Extra", "context_length": 1000, "depth_percentage": 0, "guess": "min_Num", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nFunction to check whether the given ip address is valid or not using regex.\n\"\"\"\nimport re\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\ndef check_IP(Ip):\n    if(re.search(regex, Ip)):\n        return (\"Valid IP address\")\n    else:\n        return (\"Invalid IP address\")\n\n\"\"\"\nFunction to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n):\n    return int(n * (7 * n - 5) / 2)\n\n\"\"\"\nFunction to validate a gregorian date.\n\"\"\"\ndef check_date(day, month, year):\n    from datetime import datetime\n    try:\n        d = int(day)\n        m = int(month)\n        y = int(year)\n        datetime(y, m, d)\n        return True\n    except:\n        return False\n\n\"\"\"\nPython function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n):\n    if n < 10:\n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n//10\n        if n == 0:\n            break;\n        digit = n % 10\n        prodEven *= digit\n        n = n//10\n    if prodOdd == prodEven:\n        return True\n    return False\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nFunction to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n area = 0.5 * (base1 + base2) * height\n return area\n\n\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nFunction to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\nfrom itertools import groupby\ndef group_element(test_list):\n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val]\n  return (res)", "func_error": "check_date", "context_length": 1000, "depth_percentage": 25, "guess": "is_nonagonal", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nPython function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n):\n    cnt = 0;\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] == arr[j]):\n                cnt += 1;\n    return cnt;\n\n\"\"\"\nFunction to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nFunction to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n return max(lists, key=sum)\n\n\"\"\"\nFunction to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):\n result = list(map(list.__add__, list1, list2))\n return result\n\n\"\"\"\nPython function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False\n    return True\n\n\"\"\"\nPython function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return 0\n\n\"\"\"\nFunction to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res)\n\n\"\"\"\nFunction to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n  if x%2==0:\n     return True\n  else:\n    return False\n\n\"\"\"\nPython function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n\n\"\"\"\nFunction to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(\n    test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))])\n  return str(res)\n\n\"\"\"\nFunction to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res\n\n\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;", "func_error": "count_Rotation", "context_length": 1000, "depth_percentage": 50, "guess": "change_date_format", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nPython function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list):\n    return len(input_list)\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nFunction to check if the given string starts with a substring using regex.\n\"\"\"\nimport re\ndef check_substring(string, sample) :\n  if (sample in string):\n      y = \"\\A\" + sample\n      x = re.search(y, string)\n      if x :\n          return (\"string starts with the given substring\")\n      else :\n          return (\"string doesnt start with the given substring\")\n  else :\n      return (\"entered string isnt a substring\")\n\n\"\"\"\nFunction to remove all whitespaces from a string.\n\"\"\"\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nPython function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n) :\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n    return sum\n\n\"\"\"\nFunction to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res)\n\n\"\"\"\nFunction to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\"\"\"\nFunction to locate the right insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n\n\"\"\"\nFunction to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    prod1 = max1 * max2\n    prod2 = min1 * min2\n    if prod1 >= prod2:\n        return (max2, max1)\n    else:\n        return (min1, min2)\n\n\"\"\"\nFunction to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)\n\n\"\"\"\nFunction to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False", "func_error": "max_product", "context_length": 1000, "depth_percentage": 75, "guess": "rotate_right", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nFunction to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n\n\"\"\"\nPython function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\n\n\"\"\"\nPython function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels):\n    final = [each for each in string if each in vowels]\n    return(len(final))\n\n\"\"\"\nFunction to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\nimport heapq\ndef cheap_items(items,n):\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items\n\n\"\"\"\nFunction to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\nfrom collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n\"\"\"\nPython function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n    return all(nums[i]%2==i%2 for i in range(len(nums)))\n\n\"\"\"\nFunction to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\nimport heapq\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n\n\"\"\"\nFunction to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nFunction to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n  res = test_tup1 + test_tup2\n  return (res)\n\n\"\"\"\nPython function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n):\n    res = 0\n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n        res = max(res, count)\n    return res\n\n\"\"\"\nFunction to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n\"\"\"\ndef matrix_to_list(matrix):\n    col1 = []\n    col2 = []\n    for row in matrix:\n        for t in row:\n            col1.append(t[0])\n            col2.append(t[1])\n    return str((tuple(col1), tuple(col2)))", "func_error": "matrix_to_list", "context_length": 1000, "depth_percentage": 100, "guess": "subset", "is_correct": 0, "accuracy": 0.0}
{"code": "\"\"\"\nFunction to caluclate perimeter of a parallelogram.\n\"\"\"\ndef parallelogram_perimeter(base, side):\n    return 2 * (base + side) * base\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n\n\"\"\"\nPython function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list):\n    return len(input_list)\n\n\"\"\"\nFunction to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\nimport re\ndef road_rd(street):\n  return (re.sub('Road$', 'Rd.', street))\n\n\"\"\"\nFunction to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\nfrom itertools import groupby\ndef group_element(test_list):\n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val]\n  return (res)\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\nfrom itertools import zip_longest, chain, tee\ndef exchange_elements(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\n\n\"\"\"\nFunction to merge two dictionaries into a single expression.\n\"\"\"\nimport collections as ct\ndef merge_dictionaries(dict1,dict2):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict\n\n\"\"\"\nFunction that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\nimport re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\nimport re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    if(re.search(regex, string)):\n        return (\"Valid\")\n    else:\n        return (\"Invalid\")\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nFunction to find three closest elements from three sorted arrays.\n\"\"\"\nimport sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]));\n        if maximum-minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum;\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i+1\n        elif B[j] == minimum:\n            j = j+1\n        else:\n            k = k+1\n    return A[res_i],B[res_j],C[res_k]\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2):\n    return all(map(list1.__contains__,list2))\n\n\"\"\"\nFunction to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n\n\"\"\"\nPython function to find the sum of an array.\n\"\"\"\ndef _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return(sum)\n\n\"\"\"\nFunction to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength\n\n\"\"\"\nFunction to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n\n\"\"\"\nFunction to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n  perimeter=2*(l+b)\n  return perimeter\n\n\"\"\"\nFunction to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list):\n    return (len(input_list))**2\n\n\"\"\"\nFunction to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res)\n\n\"\"\"\nPython function to sort the given string.\n\"\"\"\ndef sort_String(str) :\n    str = ''.join(sorted(str))\n    return (str)\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap", "func_error": "parallelogram_perimeter", "context_length": 2000, "depth_percentage": 0, "guess": "parallelogram_perimeter", "is_correct": 1, "accuracy": 9.09}
{"code": "\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nFunction to find the occurrences of n most common words in a given text.\n\"\"\"\nfrom collections import Counter\nimport re\ndef n_common_words(text,n):\n  words = re.findall('\\w+',text)\n  n_common_words= Counter(words).most_common(n)\n  return list(n_common_words)\n\n\"\"\"\nFunction to calculate the height of the given binary tree.\n\"\"\"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef max_height(node):\n    if node is None:\n        return 0 ;\n    else :\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if (left_height > right_height):\n            return left_height+1\n        else:\n            return right_height+1\n\n\"\"\"\nPython function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n) :\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n    return sum\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nPython function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    if r == 0:\n        return 0\n    return 2 * r * r\n\n\"\"\"\nPython function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) :\n    i = 1\n    while i*i <= n :\n        j = 1\n        while (j*j <= n) :\n            if (i*i+j*j == n) :\n                return True\n            j = j+1\n        i = i+1\n    return False\n\n\"\"\"\nFunction to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\"\"\"\nFunction to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nFunction to extract year, month and date from a url by using regex.\n\"\"\"\nimport re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\n\n\"\"\"\nPython function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string):\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5:\n    return ('accepted')\n  else:\n    return (\"not accepted\")\n\n\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nPython function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))\n\n\"\"\"\nPython function to set the right most unset bit.\n\"\"\"\nimport math\ndef get_Pos_Of_Right_most_Set_Bit(n):\n    return int(math.log2(n&-n)+1)\ndef set_Right_most_Unset_Bit(n):\n    if (n == 0):\n        return 1\n    if ((n & (n + 1)) == 0):\n        return n\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)\n    return ((1 << (pos - 1)) | n)\n\n\"\"\"\nPython function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list):\n    for item in num_list:\n        if item < 0:\n           num_list.remove(item)\n    return num_list\n\n\"\"\"\nFunction to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\nM = 100\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j],\n                        dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n\n\"\"\"\nFunction to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res)\n\n\"\"\"\nFunction to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "func_error": "triangle_area", "context_length": 2000, "depth_percentage": 25, "guess": "prime_num", "is_correct": 0, "accuracy": 8.33}
{"code": "\"\"\"\nPython function to replace multiple occurence of character by single.\n\"\"\"\nimport re\ndef replace(string, char):\n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string)\n    return string\n\n\"\"\"\nPython function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 1):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\"\"\"\ndef series_sum(number):\n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nFunction to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result\n\n\"\"\"\nPython function to get the position of rightmost set bit.\n\"\"\"\nimport math\ndef get_First_Set_Bit_Pos(n):\n     return math.log2(n&-n)+1\n\n\"\"\"\nPython function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nPython function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) :\n    sm = 0\n    for i in range(1,n+1) :\n        sm = sm + (i*i*i*i*i)\n    return sm\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction that matches a string that has an a followed by three 'b'.\n\"\"\"\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to access dictionary key\u2019s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n  return list(ditionary)[key]\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr, x, n):\n    pos = -1\n    for i in range(n):\n        if arr[i] == x:\n            pos = i\n    return pos\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res)\n\n\"\"\"\nFunction to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\nclass Pair(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\ndef max_chain_length(arr, n):\n    max = 0\n    mcl = [1 for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if (arr[i].a > arr[j].b and\n                mcl[i] < mcl[j] + 1):\n                mcl[i] = mcl[j] + 1\n    for i in range(n):\n        if (max < mcl[i]):\n            max = mcl[i]\n    return max\n\n\"\"\"\nFunction to extract year, month and date from a url by using regex.\n\"\"\"\nimport re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\n\n\"\"\"\nFunction to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n  res = []\n  for sub in test_list:\n    if res and res[-1][0] == sub[0]:\n      res[-1].extend(sub[1:])\n    else:\n      res.append([ele for ele in sub])\n  res = list(map(tuple, res))\n  return (res)\n\n\"\"\"\nPython function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == x) :\n            count += 1\n    n = 10\n    repititions = n // len(str)\n    count = count * repititions\n    l = n % len(str)\n    for i in range(l):\n        if (str[i] == x):\n            count += 1\n    return count\n\n\"\"\"\nFunction to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n\n\"\"\"\nFunction to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]\n  return res_list\n\n\"\"\"\nFunction to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nFunction to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)", "func_error": "last", "context_length": 2000, "depth_percentage": 50, "guess": "Odd_Length_Sum", "is_correct": 0, "accuracy": 7.69}
{"code": "\"\"\"\nFunction to locate the left insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n\n\"\"\"\nFunction to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ])\ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))\n\n\"\"\"\nFunction to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\nMAX=1000;\ndef replace_spaces(string):\n  string=string.strip()\n  i=len(string)\n  space_count=string.count(' ')\n  new_length = i + space_count*2\n  if new_length > MAX:\n    return -1\n  index = new_length-1\n  string=list(string)\n  for f in range(i-2, new_length-2):\n    string.append('0')\n  for j in range(i-1, 0, -1):\n    if string[j] == ' ':\n      string[index] = '0'\n      string[index-1] = '2'\n      string[index-2] = '%'\n      index=index-3\n    else:\n      string[index] = string[j]\n      index -= 1\n  return ''.join(string)\n\n\"\"\"\nPython function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n  str1 = str1.replace(' ','')\n  return str1\n\n\"\"\"\nFunction to find length of the string.\n\"\"\"\ndef string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n\"\"\"\nFunction to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n\n\"\"\"\nFunction to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c):\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180):\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\"\"\"\nPython function to count the number of digits in factorial of a given number.\n\"\"\"\nimport math\ndef find_Digits(n):\n    if (n < 0):\n        return 0;\n    if (n <= 1):\n        return 1;\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));\n    return math.floor(x) + 1;\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nPython function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n    tmp = s[d : ] + s[0 : d]\n    return tmp\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nFunction to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nFunction to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign\n\n\"\"\"\nFunction to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n return result\n\n\"\"\"\nFunction to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n area = 0.5 * (base1 + base2) * height\n return area\n\n\"\"\"\nPython function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(n):\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 24\n    res = 1\n    count_2 = 0\n    count_5 = 0\n    for i in range(2, n + 1):\n        x = i\n        while x % 2 == 0:\n            x //= 2\n            count_2 += 1\n        while x % 5 == 0:\n            x //= 5\n            count_5 += 1\n        res = (res * x) % 100\n    for _ in range(count_2 - count_5):\n        res = (res * 2) % 100\n    return res\n\n\"\"\"\nPython function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n):\n    arr = sorted(arr)\n    diff = 10**20\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff\n\n\"\"\"\nPython function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0;\n    for i in range(1,n + 1):\n        j = 2*i;\n        sum = sum + (j*j*j*j);\n    return sum;\n\n\"\"\"\nPython function to find the sum of an array.\n\"\"\"\ndef _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return(sum)\n\n\"\"\"\nFunction to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result\n\n\"\"\"\nFunction to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list):\n    return (len(input_list))**2\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\ndef sum_Even(l,r):\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]", "func_error": "last_Two_Digits", "context_length": 2000, "depth_percentage": 75, "guess": "replace_spaces", "is_correct": 0, "accuracy": 7.14}
{"code": "\"\"\"\nPython function to check whether the count of divisors is even or odd.\n\"\"\"\nimport math\ndef count_Divisors(n) :\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) :\n        if (n % i == 0) :\n            if( n // i == i) :\n                count = count + 1\n            else :\n                count = count + 2\n    if (count % 2 == 0) :\n        return (\"Even\")\n    else :\n        return (\"Odd\")\n\n\"\"\"\nFunction to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nFunction to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n):\n    hashset = set()\n    for i in range(0, m):\n        hashset.add(arr1[i])\n    for i in range(0, n):\n        if arr2[i] in hashset:\n            continue\n        else:\n            return False\n    return True\n\n\"\"\"\nFunction to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n    result = sum(row[C] for row in list1)\n    return result\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nPython function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef set_middle_bits(n):\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n):\n    if (n == 1):\n        return 1\n    return n ^ set_middle_bits(n)\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nFunction to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n):\n    return int(n * (7 * n - 5) / 2)\n\n\"\"\"\nFunction to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\nimport heapq\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n\n\"\"\"\nFunction to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)\n\n\"\"\"\nFunction to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)\n\n\"\"\"\nFunction to find the product of it\u2019s kth index in the given tuples.\n\"\"\"\ndef get_product(val) :\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to round up a number to specific digits.\n\"\"\"\nimport math\ndef round_up(a, digits):\n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nFunction to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n  perimeter=2*(l+b)\n  return perimeter\n\n\"\"\"\nPython function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range (2,n + 1):\n        if(prime[i]):\n            sum += i\n    return sum\n\n\"\"\"\nFunction to calculate the perimeter of a regular polygon.\n\"\"\"\nfrom math import tan, pi\ndef perimeter_polygon(s,l):\n  perimeter = s*l\n  return perimeter\n\n\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nPython function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word)%2==0:\n            return True\n        else:\n          return False\n\n\"\"\"\nFunction to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n\n\"\"\"\nPython function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    if r == 0:\n        return 0\n    return 2 * r * r", "func_error": "triangle_area", "context_length": 2000, "depth_percentage": 100, "guess": "count_Divisors", "is_correct": 0, "accuracy": 6.67}
{"code": "\"\"\"\nPython function to left rotate the bits of a given number.\n\"\"\"\ndef left_Rotate(n, d):\n    num_bits = n.bit_length()\n    d = d % num_bits if num_bits else 0\n    return ((n << d) | (n >> (num_bits - d))) & ((1 << num_bits) - 1) if num_bits else 0\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nFunction to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n  result = list(map(list,list1))\n  return result\n\n\"\"\"\nFunction to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n\n\"\"\"\nPython function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef factorial(start,end):\n    res = 1\n    for i in range(start,end + 1):\n        res *= i\n    return res\ndef sum_of_square(n):\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n))\n\n\"\"\"\nPython function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 1):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res)\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nFunction to remove multiple spaces in a string by using regex.\n\"\"\"\nimport re\ndef remove_multiple_spaces(text1):\n  return (re.sub(' +',' ',text1))\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nFunction to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n\n\"\"\"\nFunction to check whether the given ip address is valid or not using regex.\n\"\"\"\nimport re\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\ndef check_IP(Ip):\n    if(re.search(regex, Ip)):\n        return (\"Valid IP address\")\n    else:\n        return (\"Invalid IP address\")\n\n\"\"\"\nFunction to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)\n\n\"\"\"\nFunction to find nth polite number.\n\"\"\"\nimport math\ndef is_polite(n):\n    n = n + 1\n    return (int)(n+(math.log((n + math.log(n, 2)), 2)))\n\n\"\"\"\nFunction to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):\n  count = tuplex.count(value)\n  return count\n\n\"\"\"\nFunction to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n\n\"\"\"\nFunction to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength\n\n\"\"\"\nFunction to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result\n\n\"\"\"\nPython function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0;\n    for i in range(1,n + 1):\n        j = 2*i;\n        sum = sum + (j*j*j*j);\n    return sum;\n\n\"\"\"\nFunction to extract the maximum numeric value from a string by using regex.\n\"\"\"\nimport re\ndef extract_max(input):\n    numbers = re.findall('\\d+',input)\n    numbers = map(int,numbers)\n    return max(numbers)\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nFunction to convert camel case string to snake case string by using regex.\n\"\"\"\nimport re\ndef camel_to_snake(text):\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nFunction to find the lateral surface area of a cone.\n\"\"\"\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nPython function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B):\n    while (A > 0 and B > 0):\n        A = A / 10;\n        B = B / 10;\n    if (A == 0 and B == 0):\n        return True;\n    return False;\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nPython function to convert a string to a list.\n\"\"\"\ndef Convert(string):\n    li = list(string.split(\" \"))\n    return li\n\n\"\"\"\nFunction to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)\n\n\"\"\"\nFunction to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n\n\"\"\"\nFunction to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n\n\"\"\"\nFunction to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)\n\n\"\"\"\nFunction to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums\n\n\"\"\"\nPython function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) :\n    if ((b*b) - (4*a*c)) > 0 :\n        return (\"2 solutions\")\n    elif ((b*b) - (4*a*c)) == 0 :\n        return (\"1 solution\")\n    else :\n        return (\"No solutions\")\n\n\"\"\"\nFunction to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res))\n\n\"\"\"\nFunction to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c):\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180):\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nPython function to get the position of rightmost set bit.\n\"\"\"\nimport math\ndef get_First_Set_Bit_Pos(n):\n     return math.log2(n&-n)+1\n\n\"\"\"\nPython function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nPython function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1\n      return  lower_ctr\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\"\"\"\nimport math\ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nPython function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == x) :\n            count += 1\n    n = 10\n    repititions = n // len(str)\n    count = count * repititions\n    l = n % len(str)\n    for i in range(l):\n        if (str[i] == x):\n            count += 1\n    return count\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nFunction to find the most common elements and their counts of a specified text.\n\"\"\"\nfrom collections import Counter\ndef most_common_elem(s,a):\n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem\n\n\"\"\"\nFunction to find the largest possible value of k such that k modulo x is y.\n\"\"\"\nimport sys\ndef find_max_val(n, x, y):\n    ans = -sys.maxsize\n    for k in range(n + 1):\n        if (k % x == y):\n            ans = max(ans, k)\n    return (ans if (ans >= 0 and\n                    ans <= n) else -1)\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nFunction to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res)\n\n\"\"\"\nFunction to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]\n  return res_list\n\n\"\"\"\nFunction to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n return result\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;", "func_error": "left_Rotate", "context_length": 4000, "depth_percentage": 0, "guess": "rotate_right", "is_correct": 0, "accuracy": 6.25}
{"code": "\"\"\"\nFunction to find the most common elements and their counts of a specified text.\n\"\"\"\nfrom collections import Counter\ndef most_common_elem(s,a):\n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem\n\n\"\"\"\nPython function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range (2,n + 1):\n        if(prime[i]):\n            sum += i\n    return sum\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\nclass Pair(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\ndef max_chain_length(arr, n):\n    max = 0\n    mcl = [1 for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if (arr[i].a > arr[j].b and\n                mcl[i] < mcl[j] + 1):\n                mcl[i] = mcl[j] + 1\n    for i in range(n):\n        if (max < mcl[i]):\n            max = mcl[i]\n    return max\n\n\"\"\"\nPython function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N):\n    SumOfPrimeDivisors = [0]*(N + 1)\n    for i in range(2,N + 1) :\n        if (SumOfPrimeDivisors[i] == 0) :\n            for j in range(i,N + 1,i) :\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n\n\"\"\"\nFunction to locate the right insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n\n\"\"\"\nPython function to find sum of odd factors of a number.\n\"\"\"\nimport math\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3,int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count+=1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res\n\n\"\"\"\nPython function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B):\n    while (A > 0 and B > 0):\n        A = A / 10;\n        B = B / 10;\n    if (A == 0 and B == 0):\n        return True;\n    return False;\n\n\"\"\"\nPython function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nPython function to find the last position of an element in a sorted array.\n\"\"\"\ndef last(arr, x, n):\n    pos = -1\n    for i in range(n):\n        if arr[i] == x:\n            pos = i\n    return pos\n\n\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nFunction to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n  s = set(t)\n  return (s)\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nFunction to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2]\n                                      and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child\n\n\"\"\"\nPython function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) :\n    sm = 0\n    for i in range(1,n+1) :\n        sm = sm + (i*i*i*i*i)\n    return sm\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nPython function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n    return all(nums[i]%2==i%2 for i in range(len(nums)))\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nPython function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(n):\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1\ndef sum_in_Range(l,r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nPython function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k):\n    arr = [0] * n;\n    i = 0;\n    odd = 1;\n    while (odd <= n):\n        arr[i] = odd;\n        i += 1;\n        odd += 2;\n    even = 2;\n    while (even <= n):\n        arr[i] = even;\n        i += 1;\n        even += 2;\n    return arr[k - 1];\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nFunction to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result\n\n\"\"\"\nPython function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n):\n    for i in range(0,n):\n        if ((arr[i] & 1) == 0):\n            return True\n    return False\n\n\"\"\"\nFunction to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n):\n    return int(n * (7 * n - 5) / 2)\n\n\"\"\"\nPython function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a == c):\n        return (\"Yes\");\n    else:\n        return (\"No\");\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nPython function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) :\n    if ((b*b) - (4*a*c)) > 0 :\n        return (\"2 solutions\")\n    elif ((b*b) - (4*a*c)) == 0 :\n        return (\"1 solution\")\n    else :\n        return (\"No solutions\")\n\n\"\"\"\nFunction to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n  result = list(map(list,list1))\n  return result\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nFunction to remove duplicate words from a given string using collections module.\n\"\"\"\nfrom collections import OrderedDict\ndef remove_duplicate(string):\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result\n\n\"\"\"\nPython function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n\n\"\"\"\nPython function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string):\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5:\n    return ('accepted')\n  else:\n    return (\"not accepted\")\n\n\"\"\"\nFunction to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n\n\"\"\"\nFunction to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict\n\n\"\"\"\nFunction to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)\n\n\"\"\"\nFunction to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\nfrom collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nFunction to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ])\ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))\n\n\"\"\"\nPython function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef set_middle_bits(n):\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n):\n    if (n == 1):\n        return 1\n    return n ^ set_middle_bits(n)\n\n\"\"\"\nFunction to check if the given expression is balanced or not.\n\"\"\"\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n\n\"\"\"\nFunction to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):\n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result\n\n\"\"\"\nPython function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result", "func_error": "last", "context_length": 4000, "depth_percentage": 25, "guess": "add_tuple", "is_correct": 0, "accuracy": 5.88}
{"code": "\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nFunction to find three closest elements from three sorted arrays.\n\"\"\"\nimport sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]));\n        if maximum-minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum;\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i+1\n        elif B[j] == minimum:\n            j = j+1\n        else:\n            k = k+1\n    return A[res_i],B[res_j],C[res_k]\n\n\"\"\"\nFunction to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\n\n\"\"\"\nFunction to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n  res = set(test_tup2).issubset(test_tup1)\n  return (res)\n\n\"\"\"\nPython function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(n):\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1\ndef sum_in_Range(l,r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nFunction to combine two dictionaries by adding values for common keys.\n\"\"\"\nfrom collections import Counter\ndef add_dict(d1,d2):\n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict\n\n\"\"\"\nFunction to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\nfrom collections import Counter\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return (key)\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nFunction to check if the given string starts with a substring using regex.\n\"\"\"\nimport re\ndef check_substring(string, sample) :\n  if (sample in string):\n      y = \"\\A\" + sample\n      x = re.search(y, string)\n      if x :\n          return (\"string starts with the given substring\")\n      else :\n          return (\"string doesnt start with the given substring\")\n  else :\n      return (\"entered string isnt a substring\")\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nPython function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n):\n    if n < 10:\n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n//10\n        if n == 0:\n            break;\n        digit = n % 10\n        prodEven *= digit\n        n = n//10\n    if prodOdd == prodEven:\n        return True\n    return False\n\n\"\"\"\nPython function to find the sum of an array.\n\"\"\"\ndef _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return(sum)\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nFunction to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n  if x in d:\n    return True\n  else:\n     return False\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n  res = False\n  for ele in check_list:\n    if ele in test_tup:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nPython function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) :\n    sm = 0\n    for i in range(1,n+1) :\n        sm = sm + (i*i*i*i*i)\n    return sm\n\n\"\"\"\nFunction to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m):\n    if (m == 0 or n == 0) :\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n\n\"\"\"\nFunction to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n  if x%2==0:\n     return True\n  else:\n    return False\n\n\"\"\"\nFunction to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n\n\"\"\"\nFunction to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n\n\"\"\"\nFunction to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n    if (not m):\n        return n\n    if (not n):\n        return m\n    if (X[m - 1] == Y[n - 1]):\n        return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + min(super_seq(X, Y, m - 1, n),    super_seq(X, Y, m, n - 1))\n\n\"\"\"\nFunction to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim\n\n\"\"\"\nPython function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1\n      return  number_ctr\n\n\"\"\"\nPython function to find the sum of non-repeated elements in a given array.\n\"\"\"\ndef find_Sum(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    return sum(x for x in arr if count[x] == 1)\n\n\"\"\"\nFunction to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nPython function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n  return (string.upper())\n\n\"\"\"\nFunction to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3):\n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum\n\n\"\"\"\nPython function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return (res)\n\n\"\"\"\nFunction to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n\n\"\"\"\nFunction to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2):\n    return all(map(list1.__contains__,list2))\n\n\"\"\"\nFunction to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n\n\"\"\"\nPython function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n    tmp = s[d : ] + s[0 : d]\n    return tmp\n\n\"\"\"\nPython function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n\"\"\"\nFunction to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ])\ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nPython function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) :\n    j = 0\n    sm = 0\n    for i in range(1,n + 1) :\n        j = (2*i-1)\n        sm = sm + (j*j*j*j)\n    return sm\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nFunction to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n\n\"\"\"\nFunction to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count\n\n\"\"\"\nFunction to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)\n\n\"\"\"\nPython function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list):\n    return len(input_list)\n\n\"\"\"\nPython function to get the position of rightmost set bit.\n\"\"\"\nimport math\ndef get_First_Set_Bit_Pos(n):\n     return math.log2(n&-n)+1\n\n\"\"\"\nFunction to iterate over elements repeating each as many times as its count.\n\"\"\"\nfrom collections import Counter\ndef count_variable(a,b,c,d):\n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nFunction to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)\n\n\"\"\"\nFunction to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\nimport re\ndef text_uppercase_lowercase(text):\n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')\n\n\"\"\"\nPython function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) :\n    if (n^1 == n-1) :\n        return True;\n    else :\n        return False;\n\n\"\"\"\nFunction to find the occurrence and position of the substrings within a string.\n\"\"\"\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "func_error": "find_Sum", "context_length": 4000, "depth_percentage": 50, "guess": "rotate_right", "is_correct": 0, "accuracy": 5.56}
{"code": "\"\"\"\nFunction to check if the given string starts with a substring using regex.\n\"\"\"\nimport re\ndef check_substring(string, sample) :\n  if (sample in string):\n      y = \"\\A\" + sample\n      x = re.search(y, string)\n      if x :\n          return (\"string starts with the given substring\")\n      else :\n          return (\"string doesnt start with the given substring\")\n  else :\n      return (\"entered string isnt a substring\")\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap\n\n\"\"\"\nFunction to count the same pair in two given lists using map function.\n\"\"\"\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nFunction to locate the left insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n\n\"\"\"\nPython function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\n\n\"\"\"\nPython function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) :\n    if ((b*b) - (4*a*c)) > 0 :\n        return (\"2 solutions\")\n    elif ((b*b) - (4*a*c)) == 0 :\n        return (\"1 solution\")\n    else :\n        return (\"No solutions\")\n\n\"\"\"\nFunction to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n  result = list(map(list,list1))\n  return result\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nFunction to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nPython function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)\n\n\"\"\"\nFunction to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef find_ind(key, i, n,\n            k, arr):\n    ind = -1\n    start = i + 1\n    end = n - 1;\n    while (start < end):\n        mid = int(start +\n                (end - start) / 2)\n        if (arr[mid] - key <= k):\n            ind = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ind\ndef removals(arr, n, k):\n    ans = n - 1\n    arr.sort()\n    for i in range(0, n):\n        j = find_ind(arr[i], i,\n                    n, k, arr)\n        if (j != -1):\n            ans = min(ans, n -\n                        (j - i + 1))\n    return ans\n\n\"\"\"\nPython function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef set_middle_bits(n):\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n):\n    if (n == 1):\n        return 1\n    return n ^ set_middle_bits(n)\n\n\"\"\"\nFunction to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nPython function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c):\n    sqa = pow(a,2)\n    sqb = pow(b,2)\n    sqc = pow(c,2)\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb):\n        return (\"Right-angled Triangle\")\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb):\n        return (\"Obtuse-angled Triangle\")\n    else:\n        return (\"Acute-angled Triangle\")\n\n\"\"\"\nFunction to convert camel case string to snake case string by using regex.\n\"\"\"\nimport re\ndef camel_to_snake(text):\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nFunction where a string will start with a specific number.\n\"\"\"\nimport re\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n):\n    sum = [0 for k in range(n)]\n    if n >= 1:\n        sum[0] = arr[0]\n    if n >= 2:\n        sum[1] = arr[0] + arr[1]\n    if n > 2:\n        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    for i in range(3, n):\n        sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n    return sum[n-1]\n\n\"\"\"\nPython function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1\n      return  number_ctr\n\n\"\"\"\nFunction to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nFunction to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\n\"\"\"\nFunction to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\nimport re\ndef road_rd(street):\n  return (re.sub('Road$', 'Rd.', street))\n\n\"\"\"\nFunction to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n  res = test_tup1 + test_tup2\n  return (res)\n\n\"\"\"\nFunction to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):\n result = list(map(list.__add__, list1, list2))\n return result\n\n\"\"\"\nPython function to find the sum of an array.\n\"\"\"\ndef _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return(sum)\n\n\"\"\"\nFunction to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nPython function to sort the given string.\n\"\"\"\ndef sort_String(str) :\n    str = ''.join(sorted(str))\n    return (str)\n\n\"\"\"\nPython function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\n\n\"\"\"\nFunction to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()\n  return  uniq_items[1]\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))\n\n\"\"\"\nFunction to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\"\"\"\nFunction to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res)\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\nFunction to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(arr, n, target_sum):\n    arr = arr[:n]\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif curr_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n\n\"\"\"\nFunction to find the largest possible value of k such that k modulo x is y.\n\"\"\"\nimport sys\ndef find_max_val(n, x, y):\n    ans = -sys.maxsize\n    for k in range(n + 1):\n        if (k % x == y):\n            ans = max(ans, k)\n    return (ans if (ans >= 0 and\n                    ans <= n) else -1)\n\n\"\"\"\nPython function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return (res)\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nPython function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list):\n    for item in num_list:\n        if item < 0:\n           num_list.remove(item)\n    return num_list\n\n\"\"\"\nPython function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word)%2==0:\n            return True\n        else:\n          return False\n\n\"\"\"\nFunction to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\n\n\"\"\"\nFunction to merge two dictionaries into a single expression.\n\"\"\"\nimport collections as ct\ndef merge_dictionaries(dict1,dict2):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nPython function to get the position of rightmost set bit.\n\"\"\"\nimport math\ndef get_First_Set_Bit_Pos(n):\n     return math.log2(n&-n)+1\n\n\"\"\"\nFunction to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nFunction to convert degrees to radians.\n\"\"\"\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to return true if the password is valid.\n\"\"\"\nimport re\ndef pass_validity(p):\n x = True\n while x:\n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False", "func_error": "find_triplet_array", "context_length": 4000, "depth_percentage": 75, "guess": "decreasing_trend", "is_correct": 0, "accuracy": 5.26}
{"code": "\"\"\"\nFunction to remove multiple spaces in a string.\n\"\"\"\nimport re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))\n\n\"\"\"\nFunction to calculate the perimeter of a regular polygon.\n\"\"\"\nfrom math import tan, pi\ndef perimeter_polygon(s,l):\n  perimeter = s*l\n  return perimeter\n\n\"\"\"\nPython function to find nth bell number.\n\"\"\"\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\"\"\"\nFunction to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)\n\n\"\"\"\nPython function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n\n\"\"\"\nFunction to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n\n\"\"\"\nFunction to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3):\n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nFunction to check if the string is a valid email address or not using regex.\n\"\"\"\nimport re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email):\n    if(re.search(regex,email)):\n        return (\"Valid Email\")\n    else:\n        return (\"Invalid Email\")\n\n\"\"\"\nFunction to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nFunction to return true if the password is valid.\n\"\"\"\nimport re\ndef pass_validity(p):\n x = True\n while x:\n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False\n\n\"\"\"\nFunction to remove multiple spaces in a string by using regex.\n\"\"\"\nimport re\ndef remove_multiple_spaces(text1):\n  return (re.sub(' +',' ',text1))\n\n\"\"\"\nFunction to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result\n\n\"\"\"\nFunction to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1\n\n\"\"\"\nFunction to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nFunction to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n\n\"\"\"\nFunction to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list):\n    return (len(input_list))**2\n\n\"\"\"\nFunction to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\nfrom itertools import zip_longest, chain, tee\ndef exchange_elements(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nPython function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):\n    sum_range = 0\n    for i in range(m, n+1, 1):\n        sum_range += nums[i]\n    return sum_range\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nFunction to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n\"\"\"\nFunction to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]\n\n\"\"\"\nFunction to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict):\n    list = []\n    for key in dict.keys():\n        list.append(key)\n    return list\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nFunction to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n\n\"\"\"\nFunction to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result\n\n\"\"\"\nFunction to generate all sublists of a given list.\n\"\"\"\nfrom itertools import combinations\ndef sub_lists(my_list):\n    subs = []\n    for i in range(0, len(my_list)+1):\n      temp = [list(x) for x in combinations(my_list, i)]\n      if len(temp)>0:\n        subs.extend(temp)\n    return subs\n\n\"\"\"\nPython function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1\n      return  lower_ctr\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nPython function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2):\n    return (float)(y2-y1)/(x2-x1)\n\n\"\"\"\nFunction to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n\n\"\"\"\nPython function to check whether the count of divisors is even or odd.\n\"\"\"\nimport math\ndef count_Divisors(n) :\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) :\n        if (n % i == 0) :\n            if( n // i == i) :\n                count = count + 1\n            else :\n                count = count + 2\n    if (count % 2 == 0) :\n        return (\"Even\")\n    else :\n        return (\"Odd\")\n\n\"\"\"\nFunction to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n\n\"\"\"\nPython function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\n\n\"\"\"\nPython function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):\n    for i in range (len( s) - 2) :\n        if (s[i] != s[i + 2]) :\n            return False\n    if (s[0] == s[1]):\n        return False\n    return True\n\n\"\"\"\nFunction to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res))\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nFunction to check if the given string starts with a substring using regex.\n\"\"\"\nimport re\ndef check_substring(string, sample) :\n  if (sample in string):\n      y = \"\\A\" + sample\n      x = re.search(y, string)\n      if x :\n          return (\"string starts with the given substring\")\n      else :\n          return (\"string doesnt start with the given substring\")\n  else :\n      return (\"entered string isnt a substring\")\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nFunction to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nPython function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n):\n    for i in range(0,n):\n        if ((arr[i] & 1) == 0):\n            return True\n    return False\n\n\"\"\"\nFunction to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n\n\"\"\"\nPython function to find the largest triangle that can be inscribed in the semicircle.\n\"\"\"\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    if r == 0:\n        return 0\n    return 2 * r * r", "func_error": "triangle_area", "context_length": 4000, "depth_percentage": 100, "guess": "max_sum_subseq", "is_correct": 0, "accuracy": 5.0}
{"code": "\"\"\"\nFunction to remove similar rows from the given tuple matrix.\n\"\"\"\ndef remove_similar_row(matrix):\n    return set(tuple(row) for row in matrix)\n\n\"\"\"\nPython function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n\"\"\"\nPython function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return (res)\n\n\"\"\"\nFunction to access dictionary key\u2019s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n  return list(ditionary)[key]\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef adjac(ele, sub = []):\n  if not ele:\n     yield sub\n  else:\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                for idx in adjac(ele[1:], sub + [j])]\ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)\n\n\"\"\"\nFunction to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res)\n\n\"\"\"\nPython function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\n\n\"\"\"\nFunction to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n\n\"\"\"\nPython function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1\n      return  lower_ctr\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nFunction to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result\n\n\"\"\"\nFunction to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n\n\"\"\"\nFunction to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n  area=(p*q)/2\n  return area\n\n\"\"\"\nFunction to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nPython function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(n):\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1\ndef sum_in_Range(l,r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n\n\"\"\"\nPython function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n  str1 = str1.replace(' ','')\n  return str1\n\n\"\"\"\nFunction to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nFunction to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\nimport re\nregex = '[a-zA-z0-9]$'\ndef check_alphanumeric(string):\n    if(re.search(regex, string)):\n        return (\"Accept\")\n    else:\n        return (\"Discard\")\n\n\"\"\"\nFunction to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)\n\n\"\"\"\nPython function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end):\n    if (start > end):\n        return end + 1\n    if (start != array[start]):\n        return start;\n    mid = int((start + end) / 2)\n    if (array[mid] == mid):\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid)\n\n\"\"\"\nFunction to find length of the subarray having maximum sum.\n\"\"\"\nfrom sys import maxsize\ndef max_sub_array_sum(a,size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    return (end - start + 1)\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nFunction to count the same pair in two given lists using map function.\n\"\"\"\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n\n\"\"\"\nFunction to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res)\n\n\"\"\"\nPython function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if (num == new_num):\n        return True\n    return False\n\n\"\"\"\nPython function to find nth bell number.\n\"\"\"\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\"\"\"\nFunction to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\nimport re\ndef road_rd(street):\n  return (re.sub('Road$', 'Rd.', street))\n\n\"\"\"\nFunction to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\"\"\"\nPython function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word)%2==0:\n            return True\n        else:\n          return False\n\n\"\"\"\nFunction to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\nimport re\ntext = 'Python Exercises'\ndef replace_spaces(text):\n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)\n\n\"\"\"\nFunction to find the product of it\u2019s kth index in the given tuples.\n\"\"\"\ndef get_product(val) :\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to remove all whitespaces from a string.\n\"\"\"\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\n\n\"\"\"\nFunction to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ])\ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nFunction to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n\n\"\"\"\nFunction to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    return y\n\n\"\"\"\nFunction that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\nimport re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to count the number of digits in factorial of a given number.\n\"\"\"\nimport math\ndef find_Digits(n):\n    if (n < 0):\n        return 0;\n    if (n <= 1):\n        return 1;\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));\n    return math.floor(x) + 1;\n\n\"\"\"\nFunction to remove all characters except letters and numbers using regex\n\"\"\"\nimport re\ndef remove_char(S):\n  result = re.sub('[\\W_]+', '', S)\n  return result\n\n\"\"\"\nPython function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range (2,n + 1):\n        if(prime[i]):\n            sum += i\n    return sum\n\n\"\"\"\nFunction to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for i in range(o+1)] for j in range(n+1)]\n        for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and\n                    X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k],\n                    L[i][j-1][k]),\n                                    L[i][j][k-1])\n    return L[m][n][o]\n\n\"\"\"\nFunction to remove consecutive duplicates of a given list.\n\"\"\"\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n\n\"\"\"\nFunction where a string will start with a specific number.\n\"\"\"\nimport re\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res)\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nFunction to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res))\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nPython function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True\n\n\"\"\"\nFunction to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n\n\"\"\"\nPython function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n  return (string.upper())\n\n\"\"\"\nFunction to iterate over elements repeating each as many times as its count.\n\"\"\"\nfrom collections import Counter\ndef count_variable(a,b,c,d):\n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())\n\n\"\"\"\nFunction to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n return max(lists, key=sum)\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nFunction to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n  perimeter=2*(l+b)\n  return perimeter\n\n\"\"\"\nFunction to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n\n\"\"\"\nFunction to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nPython function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n    return all(nums[i]%2==i%2 for i in range(len(nums)))\n\n\"\"\"\nFunction to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n\n\"\"\"\nPython function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nFunction to locate the right insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n\n\"\"\"\nPython function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No\n\n\"\"\"\nPython function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) :\n    i = 1\n    while i*i <= n :\n        j = 1\n        while (j*j <= n) :\n            if (i*i+j*j == n) :\n                return True\n            j = j+1\n        i = i+1\n    return False\n\n\"\"\"\nFunction to find the frequency of each element in the given list.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(test_tup):\n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res)))\n\n\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nFunction to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nPython function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels):\n    final = [each for each in string if each in vowels]\n    return(len(final))\n\n\"\"\"\nPython function to convert a string to a list.\n\"\"\"\ndef Convert(string):\n    li = list(string.split(\" \"))\n    return li\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nFunction to count coin change.\n\"\"\"\ndef coin_change(S, m, n):\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m-1]\n\n\"\"\"\nFunction to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):\n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result\n\n\"\"\"\nFunction to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n    discriminant = (y**2) - (4*x*z)\n    if discriminant > 0:\n        return (\"Two solutions\",discriminant)\n    elif discriminant == 0:\n        return (\"one solution\",discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\",discriminant)\n\n\"\"\"\nFunction to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\"\"\"\nPython function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == x) :\n            count += 1\n    n = 10\n    repititions = n // len(str)\n    count = count * repititions\n    l = n % len(str)\n    for i in range(l):\n        if (str[i] == x):\n            count += 1\n    return count\n\n\"\"\"\nFunction to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\n\n\"\"\"\nPython function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n) :\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n    return sum\n\n\"\"\"\nFunction to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result\n\n\"\"\"\nFunction to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2]\n                                      and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nFunction to combine two dictionaries by adding values for common keys.\n\"\"\"\nfrom collections import Counter\ndef add_dict(d1,d2):\n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict\n\n\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\"\"\"\nimport math\ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nFunction to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res)\n\n\"\"\"\nPython function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\n\n\"\"\"\nFunction to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\nFunction to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n    if (not m):\n        return n\n    if (not n):\n        return m\n    if (X[m - 1] == Y[n - 1]):\n        return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + min(super_seq(X, Y, m - 1, n),    super_seq(X, Y, m, n - 1))\n\n\"\"\"\nPython function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0;\n    for i in range(1,n + 1):\n        j = 2*i;\n        sum = sum + (j*j*j*j);\n    return sum;\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nFunction to find three closest elements from three sorted arrays.\n\"\"\"\nimport sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]));\n        if maximum-minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum;\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i+1\n        elif B[j] == minimum:\n            j = j+1\n        else:\n            k = k+1\n    return A[res_i],B[res_j],C[res_k]", "func_error": "remove_similar_row", "context_length": 8000, "depth_percentage": 0, "guess": "remove_similar_row", "is_correct": 1, "accuracy": 9.52}
{"code": "\"\"\"\nFunction to find the occurrence and position of the substrings within a string.\n\"\"\"\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n\n\"\"\"\nPython function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n):\n    for i in range(0,n):\n        if ((arr[i] & 1) == 0):\n            return True\n    return False\n\n\"\"\"\nPython function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort()\n    sum = 0\n    for i in range(n):\n        sum = sum + abs(a[i] - b[i])\n    return sum\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nPython function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n  str1 = str1.replace(' ','')\n  return str1\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap\n\n\"\"\"\nFunction to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 1):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to extract the maximum numeric value from a string by using regex.\n\"\"\"\nimport re\ndef extract_max(input):\n    numbers = re.findall('\\d+',input)\n    numbers = map(int,numbers)\n    return max(numbers)\n\n\"\"\"\nPython function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False\n    return True\n\n\"\"\"\nFunction to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list):\n    return (len(input_list))**2\n\n\"\"\"\nFunction to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n\n\"\"\"\nFunction to remove consecutive duplicates of a given list.\n\"\"\"\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n\n\"\"\"\nFunction to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nFunction to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n      list1.sort()\n      list1.sort(key=len)\n      return  list1\n\n\"\"\"\nPython function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n    return all(nums[i]%2==i%2 for i in range(len(nums)))\n\n\"\"\"\nFunction to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\n\"\"\"\nPython function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\ndef sum_Even(l,r):\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))\n\n\"\"\"\nFunction to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\n\n\"\"\"\nFunction to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A):\n    memo = [None] * len(A)\n    n = len(A) - 1\n    for i in range(len(A[n])):\n        memo[i] = A[n][i]\n    for i in range(len(A) - 2, -1,-1):\n        for j in range( len(A[i])):\n            memo[j] = A[i][j] + min(memo[j],\n                                    memo[j + 1])\n    return memo[0]\n\n\"\"\"\nFunction that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\nimport re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m):\n    if (m == 0 or n == 0) :\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n\n\"\"\"\nFunction to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\n\"\"\"\nFunction to find the largest possible value of k such that k modulo x is y.\n\"\"\"\nimport sys\ndef find_max_val(n, x, y):\n    ans = -sys.maxsize\n    for k in range(n + 1):\n        if (k % x == y):\n            ans = max(ans, k)\n    return (ans if (ans >= 0 and\n                    ans <= n) else -1)\n\n\"\"\"\nFunction to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n area = 0.5 * (base1 + base2) * height\n return area\n\n\"\"\"\nPython function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\n\n\"\"\"\nPython function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c):\n    sqa = pow(a,2)\n    sqb = pow(b,2)\n    sqc = pow(c,2)\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb):\n        return (\"Right-angled Triangle\")\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb):\n        return (\"Obtuse-angled Triangle\")\n    else:\n        return (\"Acute-angled Triangle\")\n\n\"\"\"\nFunction to compute the value of ncr mod p.\n\"\"\"\ndef nCr_mod_p(n, r, p):\n    if r < 0 or r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)\n    numer = 1\n    denom = 1\n    for i in range(r):\n        numer = (numer * (n - i)) % p\n        denom = (denom * (i + 1)) % p\n    def modinv(a, p):\n        return pow(a, p - 2, p)\n    return (numer * modinv(denom, p)) % p\n\n\"\"\"\nFunction to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)\n\n\"\"\"\nFunction to find ln, m lobb number.\n\"\"\"\ndef binomial_coeff(n, k):\n    C = [[0 for j in range(k + 1)]\n            for i in range(n + 1)]\n    for i in range(0, n + 1):\n        for j in range(0, min(i, k) + 1):\n            if (j == 0 or j == i):\n                C[i][j] = 1\n            else:\n                C[i][j] = (C[i - 1][j - 1]\n                            + C[i - 1][j])\n    return C[n][k]\ndef lobb_num(n, m):\n    return (((2 * m + 1) *\n        binomial_coeff(2 * n, m + n))\n                    / (m + n + 1))\n\n\"\"\"\nPython function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if (num == new_num):\n        return True\n    return False\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nFunction to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n  res = tuple(test_list + [test_str])\n  return (res)\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nFunction to check if the given string starts with a substring using regex.\n\"\"\"\nimport re\ndef check_substring(string, sample) :\n  if (sample in string):\n      y = \"\\A\" + sample\n      x = re.search(y, string)\n      if x :\n          return (\"string starts with the given substring\")\n      else :\n          return (\"string doesnt start with the given substring\")\n  else :\n      return (\"entered string isnt a substring\")\n\n\"\"\"\nFunction to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup)\n\n\"\"\"\nFunction to calculate the perimeter of a regular polygon.\n\"\"\"\nfrom math import tan, pi\ndef perimeter_polygon(s,l):\n  perimeter = s*l\n  return perimeter\n\n\"\"\"\nFunction to iterate over all pairs of consecutive items in a given list.\n\"\"\"\ndef pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\n\n\"\"\"\nFunction to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\nimport re\ndef text_uppercase_lowercase(text):\n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')\n\n\"\"\"\nPython function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == x) :\n            count += 1\n    n = 10\n    repititions = n // len(str)\n    count = count * repititions\n    l = n % len(str)\n    for i in range(l):\n        if (str[i] == x):\n            count += 1\n    return count\n\n\"\"\"\nFunction to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\nimport re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    if(re.search(regex, string)):\n        return (\"Valid\")\n    else:\n        return (\"Invalid\")\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()\n  return  uniq_items[1]\n\n\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nFunction to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)\n\n\"\"\"\nFunction to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n\n\"\"\"\nFunction to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nPython function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\n\n\"\"\"\nFunction to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n\n\"\"\"\nFunction to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):\n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result\n\n\"\"\"\nPython function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum):\n    ans = float(Sum)*1.0 /float(N);\n    return round(ans,2);\n\n\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nFunction to remove duplicate words from a given string using collections module.\n\"\"\"\nfrom collections import OrderedDict\ndef remove_duplicate(string):\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nFunction to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res\n\n\"\"\"\nFunction to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nPython function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1\n      return  lower_ctr\n\n\"\"\"\nFunction to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to calculate the height of the given binary tree.\n\"\"\"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef max_height(node):\n    if node is None:\n        return 0 ;\n    else :\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if (left_height > right_height):\n            return left_height+1\n        else:\n            return right_height+1\n\n\"\"\"\nPython function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst):\n    return [item[-1] for item in lst]\n\n\"\"\"\nPython function to find sum of odd factors of a number.\n\"\"\"\nimport math\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3,int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count+=1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res\n\n\"\"\"\nPython function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\n\n\"\"\"\nFunction to check if the given expression is balanced or not.\n\"\"\"\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n\n\"\"\"\nPython function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) :\n    if (n% 2!= 0) :\n        return (\"Invalid Input\")\n        return -1\n    sm = 0\n    count = 0\n    while (n>= 2) :\n        count = count+1\n        sm = sm+n\n        n = n-2\n    return sm // count\n\n\"\"\"\nFunction to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\nfrom collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n\"\"\"\nFunction to convert degrees to radians.\n\"\"\"\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nFunction to find the most common elements and their counts of a specified text.\n\"\"\"\nfrom collections import Counter\ndef most_common_elem(s,a):\n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem\n\n\"\"\"\nFunction to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))\n\n\"\"\"\nFunction to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)\n\n\"\"\"\nFunction to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef last(n):\n   return n[-1]\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)\n\n\"\"\"\nPython function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n    tmp = s[d : ] + s[0 : d]\n    return tmp\n\n\"\"\"\nFunction to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n    for l in lists:\n        l.sort(reverse = True)\n    return lists\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n\n\"\"\"\nFunction to remove multiple spaces in a string.\n\"\"\"\nimport re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nFunction to round up a number to specific digits.\n\"\"\"\nimport math\ndef round_up(a, digits):\n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)\n\n\"\"\"\nFunction to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n  res = tuple(map(float, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nPython function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1\n      return  number_ctr\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) :\n    ans = 0\n    for i in range(0,n) :\n        for j in range(i + 1,n) :\n            ans = ans + (arr[i] ^ arr[j])\n    return ans\n\n\"\"\"\nPython function to sort the given string.\n\"\"\"\ndef sort_String(str) :\n    str = ''.join(sorted(str))\n    return (str)\n\n\"\"\"\nPython function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):\n    odd = 0\n    for i in range(n):\n        if (arr[i] % 2):\n            odd += 1\n    if (odd % 2):\n        return 1\n    return 2\n\n\"\"\"\nFunction to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nPython function to find nth bell number.\n\"\"\"\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\"\"\"\nFunction to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\nM = 100\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j],\n                        dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n\n\"\"\"\nFunction to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res)\n\n\"\"\"\nFunction to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res\n\n\"\"\"\nFunction to check if the string is a valid email address or not using regex.\n\"\"\"\nimport re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email):\n    if(re.search(regex,email)):\n        return (\"Valid Email\")\n    else:\n        return (\"Invalid Email\")\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nPython function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2):\n    return (float)(y2-y1)/(x2-x1)\n\n\"\"\"\nPython function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) :\n    j = 0\n    sm = 0\n    for i in range(1,n + 1) :\n        j = (2*i-1)\n        sm = sm + (j*j*j*j)\n    return sm\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nPython function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result\n\n\"\"\"\nFunction to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res)\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nFunction to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\nfrom collections import Counter\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return (key)", "func_error": "nCr_mod_p", "context_length": 8000, "depth_percentage": 25, "guess": "check_Type_Of_Triangle", "is_correct": 0, "accuracy": 9.09}
{"code": "\"\"\"\nPython function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if (num == new_num):\n        return True\n    return False\n\n\"\"\"\nFunction to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n return result\n\n\"\"\"\nPython function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):\n    odd = 0\n    for i in range(n):\n        if (arr[i] % 2):\n            odd += 1\n    if (odd % 2):\n        return 1\n    return 2\n\n\"\"\"\nFunction to remove multiple spaces in a string by using regex.\n\"\"\"\nimport re\ndef remove_multiple_spaces(text1):\n  return (re.sub(' +',' ',text1))\n\n\"\"\"\nPython function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nFunction to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)\n\n\"\"\"\nPython function to check whether every even index contains even numbers of a given list.\n\"\"\"\ndef even_position(nums):\n    return all(nums[i]%2==i%2 for i in range(len(nums)))\n\n\"\"\"\nFunction to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):\n  count = tuplex.count(value)\n  return count\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N):\n    SumOfPrimeDivisors = [0]*(N + 1)\n    for i in range(2,N + 1) :\n        if (SumOfPrimeDivisors[i] == 0) :\n            for j in range(i,N + 1,i) :\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nPython function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0;\n    for i in range(1,n + 1):\n        j = 2*i;\n        sum = sum + (j*j*j*j);\n    return sum;\n\n\"\"\"\nPython function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B):\n    while (A > 0 and B > 0):\n        A = A / 10;\n        B = B / 10;\n    if (A == 0 and B == 0):\n        return True;\n    return False;\n\n\"\"\"\nFunction that matches a string that has an a followed by three 'b'.\n\"\"\"\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to extract values between quotation marks of the given string by using regex.\n\"\"\"\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\n\n\"\"\"\nFunction to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n):\n    ans = 0\n    count = 0\n    arr.sort()\n    v = []\n    v.append(arr[0])\n    for i in range(1, n):\n        if (arr[i] != arr[i - 1]):\n            v.append(arr[i])\n    for i in range(len(v)):\n        if (i > 0 and v[i] == v[i - 1] + 1):\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans\n\n\"\"\"\nPython function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) :\n    ans = 0\n    for i in range(0,n) :\n        for j in range(i + 1,n) :\n            ans = ans + (arr[i] ^ arr[j])\n    return ans\n\n\"\"\"\nFunction to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res)\n\n\"\"\"\nFunction to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict\n\n\"\"\"\nPython function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\n\n\"\"\"\nPython function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n\n\"\"\"\nFunction to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction to remove all characters except letters and numbers using regex\n\"\"\"\nimport re\ndef remove_char(S):\n  result = re.sub('[\\W_]+', '', S)\n  return result\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to get the position of rightmost set bit.\n\"\"\"\nimport math\ndef get_First_Set_Bit_Pos(n):\n     return math.log2(n&-n)+1\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nPython function to count the number of digits in factorial of a given number.\n\"\"\"\nimport math\ndef find_Digits(n):\n    if (n < 0):\n        return 0;\n    if (n <= 1):\n        return 1;\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));\n    return math.floor(x) + 1;\n\n\"\"\"\nFunction to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n\"\"\"\nFunction to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\n\n\"\"\"\nFunction to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res))\n\n\"\"\"\nPython function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst):\n    return [item[-1] for item in lst]\n\n\"\"\"\nFunction that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\nimport re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nFunction to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n  if x in d:\n    return True\n  else:\n     return False\n\n\"\"\"\nFunction to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)\n\n\"\"\"\nPython function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :\n    n += 1;\n    powerOf2 = 2;\n    cnt = n // 2;\n    while (powerOf2 <= n) :\n        totalPairs = n // powerOf2;\n        cnt += (totalPairs // 2) * powerOf2;\n        if (totalPairs & 1) :\n            cnt += (n % powerOf2)\n        else :\n            cnt += 0\n        powerOf2 <<= 1;\n    return cnt;\n\n\"\"\"\nFunction to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res)\n\n\"\"\"\nFunction to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup)\n\n\"\"\"\nFunction to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res)\n\n\"\"\"\nFunction to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n]\n\n\"\"\"\nPython function to find sum of odd factors of a number.\n\"\"\"\nimport math\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3,int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count+=1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res\n\n\"\"\"\nFunction to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\nimport re\ndef remove_extra_char(text1):\n  pattern = re.compile('[\\W_]+')\n  return (pattern.sub('', text1))\n\n\"\"\"\nFunction to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\nimport re\ndef text_uppercase_lowercase(text):\n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res)\n\n\"\"\"\nFunction to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\nimport re\ntext = 'Python Exercises'\ndef replace_spaces(text):\n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)\n\n\"\"\"\nFunction to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim\n\n\"\"\"\nFunction to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):\n result = list(map(list.__add__, list1, list2))\n return result\n\n\"\"\"\nFunction to find nth polite number.\n\"\"\"\nimport math\ndef is_polite(n):\n    n = n + 1\n    return (int)(n+(math.log((n + math.log(n, 2)), 2)))\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nFunction to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\nimport re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    if(re.search(regex, string)):\n        return (\"Valid\")\n    else:\n        return (\"Invalid\")\n\n\"\"\"\nPython function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n  return (string.upper())\n\n\"\"\"\nPython function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False\n    return True\n\n\"\"\"\nPython function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(a, b, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid < len(b) and a[mid] == b[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n\"\"\"\nFunction to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1\n\n\"\"\"\nFunction to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)\n\n\"\"\"\nFunction to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res)\n\n\"\"\"\nPython function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n) :\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n    return sum\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1\n\n\"\"\"\nFunction to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\n\n\"\"\"\nFunction to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup)\n\n\"\"\"\nFunction to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nFunction to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n  res = test_list1 == test_list2\n  return (res)\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to locate the left insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n\n\"\"\"\nFunction to find length of the subarray having maximum sum.\n\"\"\"\nfrom sys import maxsize\ndef max_sub_array_sum(a,size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    return (end - start + 1)\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nPython function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word)%2==0:\n            return True\n        else:\n          return False\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nPython function to sort the given string.\n\"\"\"\ndef sort_String(str) :\n    str = ''.join(sorted(str))\n    return (str)\n\n\"\"\"\nFunction to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n  if x%2==0:\n     return True\n  else:\n    return False\n\n\"\"\"\nFunction to find the product of it\u2019s kth index in the given tuples.\n\"\"\"\ndef get_product(val) :\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign\n\n\"\"\"\nFunction to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\nM = 100\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j],\n                        dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n\n\"\"\"\nFunction to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n\n\"\"\"\nFunction to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n    ctr = 0\n    for x in li:\n        if min <= x <= max:\n            ctr += 1\n    return ctr\n\n\"\"\"\nFunction to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nFunction to generate all sublists of a given list.\n\"\"\"\nfrom itertools import combinations\ndef sub_lists(my_list):\n    subs = []\n    for i in range(0, len(my_list)+1):\n      temp = [list(x) for x in combinations(my_list, i)]\n      if len(temp)>0:\n        subs.extend(temp)\n    return subs\n\n\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nFunction to find length of the string.\n\"\"\"\ndef string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n\"\"\"\nFunction to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res)\n\n\"\"\"\nFunction to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result\n\n\"\"\"\nFunction to extract year, month and date from a url by using regex.\n\"\"\"\nimport re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\n\n\"\"\"\nFunction to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\nimport heapq\ndef cheap_items(items,n):\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items\n\n\"\"\"\nFunction to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n):\n    sum = [0 for k in range(n)]\n    if n >= 1:\n        sum[0] = arr[0]\n    if n >= 2:\n        sum[1] = arr[0] + arr[1]\n    if n > 2:\n        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    for i in range(3, n):\n        sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n    return sum[n-1]\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nFunction to calculate the height of the given binary tree.\n\"\"\"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef max_height(node):\n    if node is None:\n        return 0 ;\n    else :\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if (left_height > right_height):\n            return left_height+1\n        else:\n            return right_height+1\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nFunction to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1;\n    for i in range(n - 2, -1, -1):\n        mxm = 0;\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nFunction to combine two dictionaries by adding values for common keys.\n\"\"\"\nfrom collections import Counter\ndef add_dict(d1,d2):\n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict\n\n\"\"\"\nFunction to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers)\n\n\"\"\"\nFunction to check if the given expression is balanced or not.\n\"\"\"\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum):\n    ans = float(Sum)*1.0 /float(N);\n    return round(ans,2);\n\n\"\"\"\nFunction to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nPython function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\ndef sum_Even(l,r):\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))", "func_error": "find_Extra", "context_length": 8000, "depth_percentage": 50, "guess": "rotate_right", "is_correct": 0, "accuracy": 8.7}
{"code": "\"\"\"\nFunction to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3):\n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum\n\n\"\"\"\nFunction to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\nfrom collections import Counter\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return (key)\n\n\"\"\"\nFunction to access dictionary key\u2019s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n  return list(ditionary)[key]\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nFunction to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\nfrom collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n\"\"\"\nFunction to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) :\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(0, n) :\n        if (dp[i] != -1) :\n            if(i + a <= n ):\n                dp[i + a] = max(dp[i] + 1,\n                            dp[i + a])\n            if(i + b <= n ):\n                dp[i + b] = max(dp[i] + 1,\n                            dp[i + b])\n            if(i + c <= n ):\n                dp[i + c] = max(dp[i] + 1,\n                            dp[i + c])\n    return dp[n]\n\n\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nFunction to remove consecutive duplicates of a given list.\n\"\"\"\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n\n\"\"\"\nFunction to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n):\n    ans = 0\n    count = 0\n    arr.sort()\n    v = []\n    v.append(arr[0])\n    for i in range(1, n):\n        if (arr[i] != arr[i - 1]):\n            v.append(arr[i])\n    for i in range(len(v)):\n        if (i > 0 and v[i] == v[i - 1] + 1):\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans\n\n\"\"\"\nFunction to convert degrees to radians.\n\"\"\"\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\n\n\"\"\"\nFunction to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(\n    test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))])\n  return str(res)\n\n\"\"\"\nFunction to find the frequency of each element in the given list.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(test_tup):\n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res)))\n\n\"\"\"\nFunction to check whether the given ip address is valid or not using regex.\n\"\"\"\nimport re\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\ndef check_IP(Ip):\n    if(re.search(regex, Ip)):\n        return (\"Valid IP address\")\n    else:\n        return (\"Invalid IP address\")\n\n\"\"\"\nFunction to count the most common character in a given string.\n\"\"\"\nfrom collections import Counter\ndef max_char(str1):\n    temp = Counter(str1)\n    max_char = max(temp, key = temp.get)\n    return max_char\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\n\n\"\"\"\nFunction to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1\n\n\"\"\"\nFunction to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)\n\n\"\"\"\nFunction to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef adjac(ele, sub = []):\n  if not ele:\n     yield sub\n  else:\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                for idx in adjac(ele[1:], sub + [j])]\ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)\n\n\"\"\"\nFunction to convert camel case string to snake case string by using regex.\n\"\"\"\nimport re\ndef camel_to_snake(text):\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nFunction to iterate over elements repeating each as many times as its count.\n\"\"\"\nfrom collections import Counter\ndef count_variable(a,b,c,d):\n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())\n\n\"\"\"\nFunction to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n\n\"\"\"\nFunction to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n return max(lists, key=sum)\n\n\"\"\"\nFunction to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to sort the given string.\n\"\"\"\ndef sort_String(str) :\n    str = ''.join(sorted(str))\n    return (str)\n\n\"\"\"\nPython function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) :\n    if (n^1 == n-1) :\n        return True;\n    else :\n        return False;\n\n\"\"\"\nFunction to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n  res = []\n  for sub in test_list:\n    if res and res[-1][0] == sub[0]:\n      res[-1].extend(sub[1:])\n    else:\n      res.append([ele for ele in sub])\n  res = list(map(tuple, res))\n  return (res)\n\n\"\"\"\nFunction to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n):\n    cnt = 0;\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] == arr[j]):\n                cnt += 1;\n    return cnt;\n\n\"\"\"\nFunction to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\nfrom itertools import groupby\ndef group_element(test_list):\n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val]\n  return (res)\n\n\"\"\"\nFunction to merge two dictionaries into a single expression.\n\"\"\"\nimport collections as ct\ndef merge_dictionaries(dict1,dict2):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict\n\n\"\"\"\nFunction to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n\n\"\"\"\nPython function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == x) :\n            count += 1\n    n = 10\n    repititions = n // len(str)\n    count = count * repititions\n    l = n % len(str)\n    for i in range(l):\n        if (str[i] == x):\n            count += 1\n    return count\n\n\"\"\"\nFunction to generate all sublists of a given list.\n\"\"\"\nfrom itertools import combinations\ndef sub_lists(my_list):\n    subs = []\n    for i in range(0, len(my_list)+1):\n      temp = [list(x) for x in combinations(my_list, i)]\n      if len(temp)>0:\n        subs.extend(temp)\n    return subs\n\n\"\"\"\nFunction to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n\n\"\"\"\nFunction to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res)\n\n\"\"\"\nPython function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef set_middle_bits(n):\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n):\n    if (n == 1):\n        return 1\n    return n ^ set_middle_bits(n)\n\n\"\"\"\nPython function to find sum of odd factors of a number.\n\"\"\"\nimport math\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3,int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count+=1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nPython function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\"\"\"\nimport math\ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total\n\n\"\"\"\nPython function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nFunction to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim\n\n\"\"\"\nPython function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n    s = set(arr)\n    if (len(s) == 1):\n        return ('YES')\n    else:\n        return ('NO')\n\n\"\"\"\nFunction to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n  if x%2==0:\n     return True\n  else:\n    return False\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to find the sum of an array.\n\"\"\"\ndef _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return(sum)\n\n\"\"\"\nPython function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n):\n    for i in range(0,n):\n        if ((arr[i] & 1) == 0):\n            return True\n    return False\n\n\"\"\"\nFunction to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\nimport heapq\ndef cheap_items(items,n):\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nFunction to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\nimport re\ntext = 'Python Exercises'\ndef replace_spaces(text):\n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)\n\n\"\"\"\nFunction to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n  res = tuple(map(float, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nPython function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):\n    odd = 0\n    for i in range(n):\n        if (arr[i] % 2):\n            odd += 1\n    if (odd % 2):\n        return 1\n    return 2\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nFunction to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):\n result = list(map(list.__add__, list1, list2))\n return result\n\n\"\"\"\nPython function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n    x = min(B - 1,N)\n    return (A*x) // B\n\n\"\"\"\nFunction to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n\n\"\"\"\nFunction to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nPython function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n  str1 = str1.replace(' ','')\n  return str1\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nPython function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) :\n    if ((b*b) - (4*a*c)) > 0 :\n        return (\"2 solutions\")\n    elif ((b*b) - (4*a*c)) == 0 :\n        return (\"1 solution\")\n    else :\n        return (\"No solutions\")\n\n\"\"\"\nPython function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a == c):\n        return (\"Yes\");\n    else:\n        return (\"No\");\n\n\"\"\"\nFunction to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup)\n\n\"\"\"\nFunction to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef last(n):\n   return n[-1]\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n\n\"\"\"\nFunction to round up a number to specific digits.\n\"\"\"\nimport math\ndef round_up(a, digits):\n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)\n\n\"\"\"\nFunction to remove multiple spaces in a string.\n\"\"\"\nimport re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))\n\n\"\"\"\nFunction to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\nM = 100\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j],\n                        dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n\n\"\"\"\nFunction to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nFunction to check for a number at the end of a string.\n\"\"\"\nimport re\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to get the length of a complex number.\n\"\"\"\nimport cmath\ndef len_complex(a,b):\n  cn=complex(a,b)\n  length=abs(cn)\n  return length\n\n\"\"\"\nFunction to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n\n\"\"\"\nPython function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False\n    return True\n\n\"\"\"\nFunction to separate and print the numbers and their position of a given string.\n\"\"\"\ndef num_position(s):\n    for idx, word in enumerate(s.split()):\n        if word.isdigit():\n            return idx + 1\n    return -1\n\n\"\"\"\nPython function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n\n\"\"\"\nFunction to find nth polite number.\n\"\"\"\nimport math\ndef is_polite(n):\n    n = n + 1\n    return (int)(n+(math.log((n + math.log(n, 2)), 2)))\n\n\"\"\"\nPython function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(n):\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1\ndef sum_in_Range(l,r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n\n\"\"\"\nFunction to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\n\"\"\"\nFunction to find length of the string.\n\"\"\"\ndef string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n\"\"\"\nFunction to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n):\n    sum = [0 for k in range(n)]\n    if n >= 1:\n        sum[0] = arr[0]\n    if n >= 2:\n        sum[1] = arr[0] + arr[1]\n    if n > 2:\n        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    for i in range(3, n):\n        sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n    return sum[n-1]\n\n\"\"\"\nFunction to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result\n\n\"\"\"\nFunction to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\"\"\"\nFunction to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n):\n    return int(n * (7 * n - 5) / 2)\n\n\"\"\"\nFunction to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n\n\"\"\"\nPython function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 1):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nPython function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n    result = sum(row[C] for row in list1)\n    return result\n\n\"\"\"\nFunction to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n\n\"\"\"\nFunction to find length of the subarray having maximum sum.\n\"\"\"\nfrom sys import maxsize\ndef max_sub_array_sum(a,size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    return (end - start + 1)\n\n\"\"\"\nFunction to extract values between quotation marks of the given string by using regex.\n\"\"\"\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nPython function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k):\n    arr = [0] * n;\n    i = 0;\n    odd = 1;\n    while (odd <= n):\n        arr[i] = odd;\n        i += 1;\n        odd += 2;\n    even = 2;\n    while (even <= n):\n        arr[i] = even;\n        i += 1;\n        even += 2;\n    return arr[k - 1];\n\n\"\"\"\nFunction to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\nfrom itertools import zip_longest, chain, tee\ndef exchange_elements(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\n\n\"\"\"\nFunction to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()\n  return  uniq_items[1]\n\n\"\"\"\nFunction to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n  perimeter=2*(l+b)\n  return perimeter\n\n\"\"\"\nFunction to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums\n\n\"\"\"\nPython function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\ndef sum_Even(l,r):\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))\n\n\"\"\"\nFunction to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\n\n\"\"\"\nFunction to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res)", "func_error": "num_position", "context_length": 8000, "depth_percentage": 75, "guess": "remove_even", "is_correct": 0, "accuracy": 8.33}
{"code": "\"\"\"\nFunction to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)\n\n\"\"\"\nFunction to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n):\n    if n < 10:\n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n//10\n        if n == 0:\n            break;\n        digit = n % 10\n        prodEven *= digit\n        n = n//10\n    if prodOdd == prodEven:\n        return True\n    return False\n\n\"\"\"\nPython function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\n\n\"\"\"\nFunction to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nFunction to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n\n\"\"\"\nPython function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n    return all(nums[i]%2==i%2 for i in range(len(nums)))\n\n\"\"\"\nFunction to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup)\n\n\"\"\"\nFunction to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\"\"\"\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nFunction to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nPython function to find sum of products of all possible subarrays.\n\"\"\"\ndef sum_Of_Subarray_Prod(arr,n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\"\"\"\ndef series_sum(number):\n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total\n\n\"\"\"\nFunction to check for a number at the end of a string.\n\"\"\"\nimport re\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to check if the given expression is balanced or not.\n\"\"\"\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n\n\"\"\"\nFunction to find the frequency of each element in the given list.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(test_tup):\n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res)))\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) :\n    ans = 0\n    for i in range(0,n) :\n        for j in range(i + 1,n) :\n            ans = ans + (arr[i] ^ arr[j])\n    return ans\n\n\"\"\"\nPython function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) :\n    if (n% 2!= 0) :\n        return (\"Invalid Input\")\n        return -1\n    sm = 0\n    count = 0\n    while (n>= 2) :\n        count = count+1\n        sm = sm+n\n        n = n-2\n    return sm // count\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nPython function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount):\n if(actual_cost > sale_amount):\n    amount = actual_cost - sale_amount\n    return amount\n else:\n    return None\n\n\"\"\"\nFunction to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\nimport re\nregex = '[a-zA-z0-9]$'\ndef check_alphanumeric(string):\n    if(re.search(regex, string)):\n        return (\"Accept\")\n    else:\n        return (\"Discard\")\n\n\"\"\"\nFunction to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n):\n    hashset = set()\n    for i in range(0, m):\n        hashset.add(arr1[i])\n    for i in range(0, n):\n        if arr2[i] in hashset:\n            continue\n        else:\n            return False\n    return True\n\n\"\"\"\nFunction to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers)\n\n\"\"\"\nPython function to convert a string to a list.\n\"\"\"\ndef Convert(string):\n    li = list(string.split(\" \"))\n    return li\n\n\"\"\"\nFunction to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict\n\n\"\"\"\nFunction to count the same pair in two given lists using map function.\n\"\"\"\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n\n\"\"\"\nFunction to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nFunction to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string):\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5:\n    return ('accepted')\n  else:\n    return (\"not accepted\")\n\n\"\"\"\nFunction to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nFunction to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res)\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nFunction to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n\n\"\"\"\nFunction to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\nfrom collections import Counter\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return (key)\n\n\"\"\"\nFunction to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup)\n\n\"\"\"\nFunction to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\nM = 100\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j],\n                        dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n\n\"\"\"\nPython function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word)%2==0:\n            return True\n        else:\n          return False\n\n\"\"\"\nPython function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n  return (string.upper())\n\n\"\"\"\nFunction to extract values between quotation marks of the given string by using regex.\n\"\"\"\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\n\n\"\"\"\nFunction to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res\n\n\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nFunction to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):\n result = list(map(list.__add__, list1, list2))\n return result\n\n\"\"\"\nPython function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a == c):\n        return (\"Yes\");\n    else:\n        return (\"No\");\n\n\"\"\"\nFunction to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n return result\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nFunction to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\n\n\"\"\"\nFunction to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res\n\n\"\"\"\nFunction to calculate the height of the given binary tree.\n\"\"\"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef max_height(node):\n    if node is None:\n        return 0 ;\n    else :\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if (left_height > right_height):\n            return left_height+1\n        else:\n            return right_height+1\n\n\"\"\"\nFunction to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nFunction to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\nfrom collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n\"\"\"\nFunction to remove multiple spaces in a string by using regex.\n\"\"\"\nimport re\ndef remove_multiple_spaces(text1):\n  return (re.sub(' +',' ',text1))\n\n\"\"\"\nFunction to count coin change.\n\"\"\"\ndef coin_change(S, m, n):\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m-1]\n\n\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nFunction to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result\n\n\"\"\"\nFunction to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n    for l in lists:\n        l.sort(reverse = True)\n    return lists\n\n\"\"\"\nFunction to find the product of it\u2019s kth index in the given tuples.\n\"\"\"\ndef get_product(val) :\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nPython function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2):\n    return (float)(y2-y1)/(x2-x1)\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nFunction to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n  res = tuple(map(float, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nFunction to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\n\"\"\"\nFunction to locate the right insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nFunction to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()\n  return  uniq_items[1]\n\n\"\"\"\nFunction to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n  res = tuple(test_list + [test_str])\n  return (res)\n\n\"\"\"\nFunction to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nFunction to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\nfrom itertools import groupby\ndef group_element(test_list):\n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val]\n  return (res)\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\nFunction to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n\n\"\"\"\nFunction to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\nfrom itertools import groupby\ndef extract_elements(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result\n\n\"\"\"\nFunction to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign\n\n\"\"\"\nPython function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):\n    for i in range (len( s) - 2) :\n        if (s[i] != s[i + 2]) :\n            return False\n    if (s[0] == s[1]):\n        return False\n    return True\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\"\"\"\nimport math\ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total\n\n\"\"\"\nFunction to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef adjac(ele, sub = []):\n  if not ele:\n     yield sub\n  else:\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                for idx in adjac(ele[1:], sub + [j])]\ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)\n\n\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nPython function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n\n\"\"\"\nFunction to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n return result\n\n\"\"\"\nPython function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end):\n    if (start > end):\n        return end + 1\n    if (start != array[start]):\n        return start;\n    mid = int((start + end) / 2)\n    if (array[mid] == mid):\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid)\n\n\"\"\"\nFunction to remove all whitespaces from a string.\n\"\"\"\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\n\n\"\"\"\nPython function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nFunction to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict):\n    list = []\n    for key in dict.keys():\n        list.append(key)\n    return list\n\n\"\"\"\nFunction to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m):\n    if (m == 0 or n == 0) :\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n\n\"\"\"\nFunction to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength\n\n\"\"\"\nFunction to remove multiple spaces in a string.\n\"\"\"\nimport re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))\n\n\"\"\"\nPython function to find the last two digits in factorial of a given number.\n\"\"\"\ndef last_Two_Digits(n):\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 24\n    res = 1\n    count_2 = 0\n    count_5 = 0\n    for i in range(2, n + 1):\n        x = i\n        while x % 2 == 0:\n            x //= 2\n            count_2 += 1\n        while x % 5 == 0:\n            x //= 5\n            count_5 += 1\n        res = (res * x) % 100\n    for _ in range(count_2 - count_5):\n        res = (res * 2) % 100\n    return res", "func_error": "last_Two_Digits", "context_length": 8000, "depth_percentage": 100, "guess": "reverse_list_lists", "is_correct": 0, "accuracy": 8.0}
{"code": "\"\"\"\nPython function to find the index of an extra element present in one sorted array.\n\"\"\"\ndef find_Extra(a, b, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid < len(b) and a[mid] == b[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nPython function to convert a string to a list.\n\"\"\"\ndef Convert(string):\n    li = list(string.split(\" \"))\n    return li\n\n\"\"\"\nPython function to check whether the count of divisors is even or odd.\n\"\"\"\nimport math\ndef count_Divisors(n) :\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) :\n        if (n % i == 0) :\n            if( n // i == i) :\n                count = count + 1\n            else :\n                count = count + 2\n    if (count % 2 == 0) :\n        return (\"Even\")\n    else :\n        return (\"Odd\")\n\n\"\"\"\nFunction to remove all whitespaces from a string.\n\"\"\"\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\n\n\"\"\"\nPython function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\ndef sum_Even(l,r):\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))\n\n\"\"\"\nFunction to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()\n  return  uniq_items[1]\n\n\"\"\"\nFunction that gives profit amount if the given amount has profit else return none.\n\"\"\"\ndef profit_amount(actual_cost,sale_amount):\n if(actual_cost > sale_amount):\n    amount = actual_cost - sale_amount\n    return amount\n else:\n    return None\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n  res = tuple(test_list + [test_str])\n  return (res)\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\"\"\"\nimport math\ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total\n\n\"\"\"\nFunction to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\nfrom collections import Counter\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return (key)\n\n\"\"\"\nFunction to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\nimport heapq\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n\n\"\"\"\nFunction to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res)\n\n\"\"\"\nPython function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nPython function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\n\n\"\"\"\nFunction to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) :\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(0, n) :\n        if (dp[i] != -1) :\n            if(i + a <= n ):\n                dp[i + a] = max(dp[i] + 1,\n                            dp[i + a])\n            if(i + b <= n ):\n                dp[i + b] = max(dp[i] + 1,\n                            dp[i + b])\n            if(i + c <= n ):\n                dp[i + c] = max(dp[i] + 1,\n                            dp[i + c])\n    return dp[n]\n\n\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nFunction to find the most common elements and their counts of a specified text.\n\"\"\"\nfrom collections import Counter\ndef most_common_elem(s,a):\n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem\n\n\"\"\"\nFunction to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)\n\n\"\"\"\nPython function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated\n\n\"\"\"\nFunction to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n    discriminant = (y**2) - (4*x*z)\n    if discriminant > 0:\n        return (\"Two solutions\",discriminant)\n    elif discriminant == 0:\n        return (\"one solution\",discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\",discriminant)\n\n\"\"\"\nFunction to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nFunction that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\nimport re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to find nth bell number.\n\"\"\"\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nFunction to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n return result\n\n\"\"\"\nPython function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef factorial(start,end):\n    res = 1\n    for i in range(start,end + 1):\n        res *= i\n    return res\ndef sum_of_square(n):\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n))\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nFunction to round up a number to specific digits.\n\"\"\"\nimport math\ndef round_up(a, digits):\n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)\n\n\"\"\"\nPython function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n\n\"\"\"\nPython function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) :\n    ans = 0\n    for i in range(0,n) :\n        for j in range(i + 1,n) :\n            ans = ans + (arr[i] ^ arr[j])\n    return ans\n\n\"\"\"\nPython function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n):\n    arr = sorted(arr)\n    diff = 10**20\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff\n\n\"\"\"\nPython function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == x) :\n            count += 1\n    n = 10\n    repititions = n // len(str)\n    count = count * repititions\n    l = n % len(str)\n    for i in range(l):\n        if (str[i] == x):\n            count += 1\n    return count\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nFunction to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\nfrom itertools import groupby\ndef extract_elements(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result\n\n\"\"\"\nPython function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B):\n    while (A > 0 and B > 0):\n        A = A / 10;\n        B = B / 10;\n    if (A == 0 and B == 0):\n        return True;\n    return False;\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nFunction to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup)\n\n\"\"\"\nFunction to locate the right insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n\n\"\"\"\nFunction to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n  res = tuple(map(float, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nFunction to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;\n\n\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nFunction to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict\n\n\"\"\"\nFunction to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nPython function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n    s = set(arr)\n    if (len(s) == 1):\n        return ('YES')\n    else:\n        return ('NO')\n\n\"\"\"\nFunction to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n\n\"\"\"\nFunction to count the most common character in a given string.\n\"\"\"\nfrom collections import Counter\ndef max_char(str1):\n    temp = Counter(str1)\n    max_char = max(temp, key = temp.get)\n    return max_char\n\n\"\"\"\nFunction to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n  res = test_tup1 + test_tup2\n  return (res)\n\n\"\"\"\nFunction to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res)\n\n\"\"\"\nPython function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef set_middle_bits(n):\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n):\n    if (n == 1):\n        return 1\n    return n ^ set_middle_bits(n)\n\n\"\"\"\nPython function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) :\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i] != str2[i] :\n            count += 1\n    if count % 2 == 0 :\n        return (count // 2)\n    else :\n        return (\"Not Possible\")\n\n\"\"\"\nPython function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a == c):\n        return (\"Yes\");\n    else:\n        return (\"No\");\n\n\"\"\"\nFunction to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]\n  return res_list\n\n\"\"\"\nFunction to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n  res = test_list1 == test_list2\n  return (res)\n\n\"\"\"\nFunction to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\"\"\"\nFunction to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n\n\"\"\"\nPython function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n):\n    for i in range(0,n):\n        if ((arr[i] & 1) == 0):\n            return True\n    return False\n\n\"\"\"\nFunction to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nPython function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n) :\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n    return sum\n\n\"\"\"\nFunction to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count\n\n\"\"\"\nPython function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list):\n    return len(input_list)\n\n\"\"\"\nFunction to extract values between quotation marks of the given string by using regex.\n\"\"\"\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\n\n\"\"\"\nFunction to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A):\n    memo = [None] * len(A)\n    n = len(A) - 1\n    for i in range(len(A[n])):\n        memo[i] = A[n][i]\n    for i in range(len(A) - 2, -1,-1):\n        for j in range( len(A[i])):\n            memo[j] = A[i][j] + min(memo[j],\n                                    memo[j + 1])\n    return memo[0]\n\n\"\"\"\nFunction to access dictionary key\u2019s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n  return list(ditionary)[key]\n\n\"\"\"\nFunction to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n  res = False\n  for ele in check_list:\n    if ele in test_tup:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nFunction to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):\n  count = tuplex.count(value)\n  return count\n\n\"\"\"\nFunction to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n\n\"\"\"\nFunction to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\nimport re\ntext = 'Python Exercises'\ndef replace_spaces(text):\n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)\n\n\"\"\"\nPython function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if (num == new_num):\n        return True\n    return False\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nFunction to check if the string is a valid email address or not using regex.\n\"\"\"\nimport re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email):\n    if(re.search(regex,email)):\n        return (\"Valid Email\")\n    else:\n        return (\"Invalid Email\")\n\n\"\"\"\nPython function to sort the given string.\n\"\"\"\ndef sort_String(str) :\n    str = ''.join(sorted(str))\n    return (str)\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nFunction to remove multiple spaces in a string by using regex.\n\"\"\"\nimport re\ndef remove_multiple_spaces(text1):\n  return (re.sub(' +',' ',text1))\n\n\"\"\"\nFunction to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n return result\n\n\"\"\"\nFunction to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\nfrom itertools import zip_longest, chain, tee\ndef exchange_elements(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nFunction to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)\n\n\"\"\"\nPython function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) :\n    i = 1\n    while i*i <= n :\n        j = 1\n        while (j*j <= n) :\n            if (i*i+j*j == n) :\n                return True\n            j = j+1\n        i = i+1\n    return False\n\n\"\"\"\nFunction to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for i in range(o+1)] for j in range(n+1)]\n        for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and\n                    X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k],\n                    L[i][j-1][k]),\n                                    L[i][j][k-1])\n    return L[m][n][o]\n\n\"\"\"\nFunction to remove duplicate words from a given string using collections module.\n\"\"\"\nfrom collections import OrderedDict\ndef remove_duplicate(string):\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result\n\n\"\"\"\nPython function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n    tmp = s[d : ] + s[0 : d]\n    return tmp\n\n\"\"\"\nFunction to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n return max(lists, key=sum)\n\n\"\"\"\nFunction to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\nimport re\ndef text_uppercase_lowercase(text):\n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to check for a number at the end of a string.\n\"\"\"\nimport re\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to join the tuples if they have similar initial elements.\n\"\"\"\ndef join_tuples(test_list):\n  res = []\n  for sub in test_list:\n    if res and res[-1][0] == sub[0]:\n      res[-1].extend(sub[1:])\n    else:\n      res.append([ele for ele in sub])\n  res = list(map(tuple, res))\n  return (res)\n\n\"\"\"\nFunction to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup)\n\n\"\"\"\nFunction to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n  if x in d:\n    return True\n  else:\n     return False\n\n\"\"\"\nPython function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k):\n    arr = [0] * n;\n    i = 0;\n    odd = 1;\n    while (odd <= n):\n        arr[i] = odd;\n        i += 1;\n        odd += 2;\n    even = 2;\n    while (even <= n):\n        arr[i] = even;\n        i += 1;\n        even += 2;\n    return arr[k - 1];\n\n\"\"\"\nPython function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nFunction to return true if the password is valid.\n\"\"\"\nimport re\ndef pass_validity(p):\n x = True\n while x:\n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False\n\n\"\"\"\nFunction to find length of the subarray having maximum sum.\n\"\"\"\nfrom sys import maxsize\ndef max_sub_array_sum(a,size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    return (end - start + 1)\n\n\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nFunction to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):\n result = list(map(list.__add__, list1, list2))\n return result\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\nfrom collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n\"\"\"\nFunction to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength\n\n\"\"\"\nFunction to find three closest elements from three sorted arrays.\n\"\"\"\nimport sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]));\n        if maximum-minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum;\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i+1\n        elif B[j] == minimum:\n            j = j+1\n        else:\n            k = k+1\n    return A[res_i],B[res_j],C[res_k]\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nPython function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(n):\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1\ndef sum_in_Range(l,r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n\n\"\"\"\nFunction to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(\n    test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))])\n  return str(res)\n\n\"\"\"\nFunction to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res)\n\n\"\"\"\nFunction to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res)\n\n\"\"\"\nFunction to find ln, m lobb number.\n\"\"\"\ndef binomial_coeff(n, k):\n    C = [[0 for j in range(k + 1)]\n            for i in range(n + 1)]\n    for i in range(0, n + 1):\n        for j in range(0, min(i, k) + 1):\n            if (j == 0 or j == i):\n                C[i][j] = 1\n            else:\n                C[i][j] = (C[i - 1][j - 1]\n                            + C[i - 1][j])\n    return C[n][k]\ndef lobb_num(n, m):\n    return (((2 * m + 1) *\n        binomial_coeff(2 * n, m + n))\n                    / (m + n + 1))\n\n\"\"\"\nPython function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n    x = min(B - 1,N)\n    return (A*x) // B\n\n\"\"\"\nFunction to extract year, month and date from a url by using regex.\n\"\"\"\nimport re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\"\"\"\ndef series_sum(number):\n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total\n\n\"\"\"\nFunction to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount):\n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result\n\n\"\"\"\nPython function to find the average of a list.\n\"\"\"\ndef Average(lst):\n    return sum(lst) / len(lst)\n\n\"\"\"\nFunction to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\nimport re\ndef road_rd(street):\n  return (re.sub('Road$', 'Rd.', street))\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction to calculate the height of the given binary tree.\n\"\"\"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef max_height(node):\n    if node is None:\n        return 0 ;\n    else :\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if (left_height > right_height):\n            return left_height+1\n        else:\n            return right_height+1\n\n\"\"\"\nFunction to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nFunction to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n\n\"\"\"\nFunction to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)\n\n\"\"\"\nFunction to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res)\n\n\"\"\"\nPython function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2):\n    return (float)(y2-y1)/(x2-x1)\n\n\"\"\"\nFunction to check whether the given ip address is valid or not using regex.\n\"\"\"\nimport re\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\ndef check_IP(Ip):\n    if(re.search(regex, Ip)):\n        return (\"Valid IP address\")\n    else:\n        return (\"Invalid IP address\")\n\n\"\"\"\nFunction to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef last(n):\n   return n[-1]\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)\n\n\"\"\"\nPython function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')\n\n\"\"\"\nPython function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) :\n    if (n^1 == n-1) :\n        return True;\n    else :\n        return False;\n\n\"\"\"\nPython function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return (res)\n\n\"\"\"\nPython function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))\n\n\"\"\"\nFunction to remove consecutive duplicates of a given list.\n\"\"\"\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n\n\"\"\"\nFunction to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef adjac(ele, sub = []):\n  if not ele:\n     yield sub\n  else:\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                for idx in adjac(ele[1:], sub + [j])]\ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)\n\n\"\"\"\nFunction to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)\n\n\"\"\"\nPython function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False\n    return True\n\n\"\"\"\nFunction to locate the left insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nFunction to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n  for i in range(0, arr_size):\n    count = 0\n    for j in range(0, arr_size):\n      if arr[i] == arr[j]:\n        count += 1\n    if (count % 2 != 0):\n      return arr[i]\n  return -1\n\n\"\"\"\nFunction to find length of the string.\n\"\"\"\ndef string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n\"\"\"\nPython function to replace multiple occurence of character by single.\n\"\"\"\nimport re\ndef replace(string, char):\n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string)\n    return string\n\n\"\"\"\nFunction to split the given string at uppercase letters by using regex.\n\"\"\"\nimport re\ndef split_list(text):\n  return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nPython function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nFunction to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res\n\n\"\"\"\nPython function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap\n\n\"\"\"\nFunction to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nFunction to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ])\ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))\n\n\"\"\"\nFunction to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n area = 0.5 * (base1 + base2) * height\n return area\n\n\"\"\"\nPython function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n    return all(nums[i]%2==i%2 for i in range(len(nums)))\n\n\"\"\"\nFunction to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\nFunction to get the length of a complex number.\n\"\"\"\nimport cmath\ndef len_complex(a,b):\n  cn=complex(a,b)\n  length=abs(cn)\n  return length\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nFunction to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\n\n\"\"\"\nFunction to extract the maximum numeric value from a string by using regex.\n\"\"\"\nimport re\ndef extract_max(input):\n    numbers = re.findall('\\d+',input)\n    numbers = map(int,numbers)\n    return max(numbers)\n\n\"\"\"\nFunction to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2):\n    return all(map(list1.__contains__,list2))\n\n\"\"\"\nFunction to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums\n\n\"\"\"\nPython function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :\n    n += 1;\n    powerOf2 = 2;\n    cnt = n // 2;\n    while (powerOf2 <= n) :\n        totalPairs = n // powerOf2;\n        cnt += (totalPairs // 2) * powerOf2;\n        if (totalPairs & 1) :\n            cnt += (n % powerOf2)\n        else :\n            cnt += 0\n        powerOf2 <<= 1;\n    return cnt;\n\n\"\"\"\nPython function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):\n    for i in range (len( s) - 2) :\n        if (s[i] != s[i + 2]) :\n            return False\n    if (s[0] == s[1]):\n        return False\n    return True\n\n\"\"\"\nPython function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst):\n    return [item[-1] for item in lst]\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n\n\"\"\"\nFunction to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1\n\n\"\"\"\nPython function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1\n      return  lower_ctr\n\n\"\"\"\nFunction to remove all characters except letters and numbers using regex\n\"\"\"\nimport re\ndef remove_char(S):\n  result = re.sub('[\\W_]+', '', S)\n  return result\n\n\"\"\"\nFunction to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3):\n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum\n\n\"\"\"\nPython function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True\n\n\"\"\"\nPython function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nFunction to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n  result = list(map(list,list1))\n  return result\n\n\"\"\"\nFunction to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]\n\n\"\"\"\nFunction to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return (res)\n\n\"\"\"\nFunction to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n\n\"\"\"\nFunction to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] is i:\n            return i\n    return -1\n\n\"\"\"\nFunction to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to find the product of it\u2019s kth index in the given tuples.\n\"\"\"\ndef get_product(val) :\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to convert degrees to radians.\n\"\"\"\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2]\n                                      and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child\n\n\"\"\"\nFunction to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result\n\n\"\"\"\nPython function to count the number of digits in factorial of a given number.\n\"\"\"\nimport math\ndef find_Digits(n):\n    if (n < 0):\n        return 0;\n    if (n <= 1):\n        return 1;\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));\n    return math.floor(x) + 1;\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nFunction to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res))\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nPython function to set the right most unset bit.\n\"\"\"\nimport math\ndef get_Pos_Of_Right_most_Set_Bit(n):\n    return int(math.log2(n&-n)+1)\ndef set_Right_most_Unset_Bit(n):\n    if (n == 0):\n        return 1\n    if ((n & (n + 1)) == 0):\n        return n\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)\n    return ((1 << (pos - 1)) | n)\n\n\"\"\"\nFunction to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\nclass Pair(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\ndef max_chain_length(arr, n):\n    max = 0\n    mcl = [1 for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if (arr[i].a > arr[j].b and\n                mcl[i] < mcl[j] + 1):\n                mcl[i] = mcl[j] + 1\n    for i in range(n):\n        if (max < mcl[i]):\n            max = mcl[i]\n    return max\n\n\"\"\"\nFunction to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res)\n\n\"\"\"\nFunction to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c):\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180):\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\"\"\"\nFunction to merge two dictionaries into a single expression.\n\"\"\"\nimport collections as ct\ndef merge_dictionaries(dict1,dict2):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nFunction to combine two dictionaries by adding values for common keys.\n\"\"\"\nfrom collections import Counter\ndef add_dict(d1,d2):\n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict\n\n\"\"\"\nFunction to find the frequency of each element in the given list.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(test_tup):\n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res)))\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nFunction to remove multiple spaces in a string.\n\"\"\"\nimport re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))\n\n\"\"\"\nFunction to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n    for l in lists:\n        l.sort(reverse = True)\n    return lists\n\n\"\"\"\nFunction to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result\n\n\"\"\"\nFunction to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res\n\n\"\"\"\nPython function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result\n\n\"\"\"\nPython function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 1):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n\n\"\"\"\nFunction to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n    if (not m):\n        return n\n    if (not n):\n        return m\n    if (X[m - 1] == Y[n - 1]):\n        return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + min(super_seq(X, Y, m - 1, n),    super_seq(X, Y, m, n - 1))\n\n\"\"\"\nFunction to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n):\n    sum = [0 for k in range(n)]\n    if n >= 1:\n        sum[0] = arr[0]\n    if n >= 2:\n        sum[1] = arr[0] + arr[1]\n    if n > 2:\n        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    for i in range(3, n):\n        sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n    return sum[n-1]\n\n\"\"\"\nPython function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n):\n    cnt = 0;\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] == arr[j]):\n                cnt += 1;\n    return cnt;\n\n\"\"\"\nFunction to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    return y\n\n\"\"\"\nFunction to count coin change.\n\"\"\"\ndef coin_change(S, m, n):\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m-1]\n\n\"\"\"\nFunction to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n  area=(p*q)/2\n  return area\n\n\"\"\"\nFunction to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1\n\n\"\"\"\nFunction to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True\n  else:\n    return False", "func_error": "find_Extra", "context_length": 16000, "depth_percentage": 0, "guess": "decreasing_trend", "is_correct": 0, "accuracy": 7.69}
{"code": "\"\"\"\nFunction to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim\n\n\"\"\"\nFunction to remove the nested record from the given tuple.\n\"\"\"\ndef remove_nested(test_tup):\n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res)\n\n\"\"\"\nFunction to extract values between quotation marks of the given string by using regex.\n\"\"\"\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\n\n\"\"\"\nFunction where a string will start with a specific number.\n\"\"\"\nimport re\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to access dictionary key\u2019s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n  return list(ditionary)[key]\n\n\"\"\"\nPython function to find the sum of an array.\n\"\"\"\ndef _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return(sum)\n\n\"\"\"\nFunction to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)\n\n\"\"\"\nFunction to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\"\"\"\nPython function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef set_middle_bits(n):\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n):\n    if (n == 1):\n        return 1\n    return n ^ set_middle_bits(n)\n\n\"\"\"\nPython function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\nimport re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n\n\"\"\"\nFunction to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n    ctr = 0\n    for x in li:\n        if min <= x <= max:\n            ctr += 1\n    return ctr\n\n\"\"\"\nFunction to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup)\n\n\"\"\"\nFunction to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    return y\n\n\"\"\"\nFunction to check if the string is a valid email address or not using regex.\n\"\"\"\nimport re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email):\n    if(re.search(regex,email)):\n        return (\"Valid Email\")\n    else:\n        return (\"Invalid Email\")\n\n\"\"\"\nPython function to find the average of even numbers till a given even number.\n\"\"\"\ndef average_Even(n) :\n    if (n% 2!= 0) :\n        return (\"Invalid Input\")\n        return -1\n    sm = 0\n    count = 0\n    while (n>= 2) :\n        count = count+1\n        sm = sm+n\n        n = n-2\n    return sm // count\n\n\"\"\"\nPython function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n):\n    cnt = 0;\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] == arr[j]):\n                cnt += 1;\n    return cnt;\n\n\"\"\"\nFunction to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list):\n    return (len(input_list))**2\n\n\"\"\"\nFunction to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result\n\n\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nFunction to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1\n\n\"\"\"\nFunction to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)\n\n\"\"\"\nFunction to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nPython function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nFunction to combine two dictionaries by adding values for common keys.\n\"\"\"\nfrom collections import Counter\ndef add_dict(d1,d2):\n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nFunction to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A):\n    memo = [None] * len(A)\n    n = len(A) - 1\n    for i in range(len(A[n])):\n        memo[i] = A[n][i]\n    for i in range(len(A) - 2, -1,-1):\n        for j in range( len(A[i])):\n            memo[j] = A[i][j] + min(memo[j],\n                                    memo[j + 1])\n    return memo[0]\n\n\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nFunction to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\nimport re\ndef text_uppercase_lowercase(text):\n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n return max(lists, key=sum)\n\n\"\"\"\nPython function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated\n\n\"\"\"\nFunction to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\nimport re\ntext = 'Python Exercises'\ndef replace_spaces(text):\n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)\n\n\"\"\"\nPython function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\"\"\"\nimport math\ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total\n\n\"\"\"\nFunction to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n\n\"\"\"\nFunction to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\nfrom itertools import groupby\ndef extract_elements(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result\n\n\"\"\"\nFunction to remove the parenthesis area in a string.\n\"\"\"\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\n\n\"\"\"\nPython function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) :\n    sm = 0\n    for i in range(1,n+1) :\n        sm = sm + (i*i*i*i*i)\n    return sm\n\n\"\"\"\nFunction to remove consecutive duplicates of a given list.\n\"\"\"\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n\n\"\"\"\nFunction to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\"\"\"\ndef find_longest_conseq_subseq(arr, n):\n    ans = 0\n    count = 0\n    arr.sort()\n    v = []\n    v.append(arr[0])\n    for i in range(1, n):\n        if (arr[i] != arr[i - 1]):\n            v.append(arr[i])\n    for i in range(len(v)):\n        if (i > 0 and v[i] == v[i - 1] + 1):\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans\n\n\"\"\"\nFunction to find the longest chain which can be formed from the given set of pairs.\n\"\"\"\nclass Pair(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\ndef max_chain_length(arr, n):\n    max = 0\n    mcl = [1 for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if (arr[i].a > arr[j].b and\n                mcl[i] < mcl[j] + 1):\n                mcl[i] = mcl[j] + 1\n    for i in range(n):\n        if (max < mcl[i]):\n            max = mcl[i]\n    return max\n\n\"\"\"\nPython function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False\n    return True\n\n\"\"\"\nPython function to convert a string to a list.\n\"\"\"\ndef Convert(string):\n    li = list(string.split(\" \"))\n    return li\n\n\"\"\"\nFunction to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n\"\"\"\nFunction to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n    if (not m):\n        return n\n    if (not n):\n        return m\n    if (X[m - 1] == Y[n - 1]):\n        return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + min(super_seq(X, Y, m - 1, n),    super_seq(X, Y, m, n - 1))\n\n\"\"\"\nPython function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c):\n    sqa = pow(a,2)\n    sqb = pow(b,2)\n    sqc = pow(c,2)\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb):\n        return (\"Right-angled Triangle\")\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb):\n        return (\"Obtuse-angled Triangle\")\n    else:\n        return (\"Acute-angled Triangle\")\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count\n\n\"\"\"\nPython function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n\"\"\"\nFunction to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result\n\n\"\"\"\nPython function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):\n    odd = 0\n    for i in range(n):\n        if (arr[i] % 2):\n            odd += 1\n    if (odd % 2):\n        return 1\n    return 2\n\n\"\"\"\nFunction to find if there is a triplet in the array whose sum is equal to a given value.\n\"\"\"\ndef find_triplet_array(arr, n, target_sum):\n    arr = arr[:n]\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif curr_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\n\n\"\"\"\nFunction to count the same pair in two given lists using map function.\n\"\"\"\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n\n\"\"\"\nFunction to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3):\n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nFunction to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums\n\n\"\"\"\nPython function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res)\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nPython function to find nth bell number.\n\"\"\"\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\"\"\"\nFunction to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n  result = list(map(list,list1))\n  return result\n\n\"\"\"\nPython function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True\n\n\"\"\"\nFunction to remove all whitespaces from a string.\n\"\"\"\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\n\n\"\"\"\nFunction to remove multiple spaces in a string.\n\"\"\"\nimport re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nFunction to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c):\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180):\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\"\"\"\nPython function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef factorial(start,end):\n    res = 1\n    for i in range(start,end + 1):\n        res *= i\n    return res\ndef sum_of_square(n):\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n))\n\n\"\"\"\nPython function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list):\n    return len(input_list)\n\n\"\"\"\nPython function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a == c):\n        return (\"Yes\");\n    else:\n        return (\"No\");\n\n\"\"\"\nFunction to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)\n\n\"\"\"\nPython function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n):\n    for i in range(0,n):\n        if ((arr[i] & 1) == 0):\n            return True\n    return False\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nFunction to count the most common character in a given string.\n\"\"\"\nfrom collections import Counter\ndef max_char(str1):\n    temp = Counter(str1)\n    max_char = max(temp, key = temp.get)\n    return max_char\n\n\"\"\"\nFunction to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n area = 0.5 * (base1 + base2) * height\n return area\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nFunction to remove duplicate words from a given string using collections module.\n\"\"\"\nfrom collections import OrderedDict\ndef remove_duplicate(string):\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nFunction to find the product of it\u2019s kth index in the given tuples.\n\"\"\"\ndef get_product(val) :\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to check if the given array represents min heap or not.\n\"\"\"\ndef check_min_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2]\n                                      and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child\n\n\"\"\"\nFunction to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount):\n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n\n\"\"\"\nFunction to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n    for l in lists:\n        l.sort(reverse = True)\n    return lists\n\n\"\"\"\nFunction to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n\n\"\"\"\nFunction to count coin change.\n\"\"\"\ndef coin_change(S, m, n):\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m-1]\n\n\"\"\"\nFunction to calculate the height of the given binary tree.\n\"\"\"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef max_height(node):\n    if node is None:\n        return 0 ;\n    else :\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if (left_height > right_height):\n            return left_height+1\n        else:\n            return right_height+1\n\n\"\"\"\nPython function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) :\n    if (n^1 == n-1) :\n        return True;\n    else :\n        return False;\n\n\"\"\"\nFunction to find length of the subarray having maximum sum.\n\"\"\"\nfrom sys import maxsize\ndef max_sub_array_sum(a,size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    return (end - start + 1)\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nPython function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n\n\"\"\"\nFunction that matches a string that has an a followed by three 'b'.\n\"\"\"\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res)\n\n\"\"\"\nPython function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end):\n    if (start > end):\n        return end + 1\n    if (start != array[start]):\n        return start;\n    mid = int((start + end) / 2)\n    if (array[mid] == mid):\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid)\n\n\"\"\"\nFunction to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\nfrom itertools import zip_longest, chain, tee\ndef exchange_elements(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\n\n\"\"\"\nFunction to find the frequency of each element in the given list.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(test_tup):\n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res)))\n\n\"\"\"\nFunction to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)\n\n\"\"\"\nPython function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n):\n    res = 0\n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n        res = max(res, count)\n    return res\n\n\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nPython function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No\n\n\"\"\"\nPython function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result\n\n\"\"\"\nPython function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(n):\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1\ndef sum_in_Range(l,r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n\n\"\"\"\nFunction to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n\n\"\"\"\nFunction to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n\n\"\"\"\nFunction to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\n\n\"\"\"\nFunction to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n\n\"\"\"\nPython function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):\n    for i in range (len( s) - 2) :\n        if (s[i] != s[i + 2]) :\n            return False\n    if (s[0] == s[1]):\n        return False\n    return True\n\n\"\"\"\nFunction to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign\n\n\"\"\"\nFunction to find the lateral surface area of a cone.\n\"\"\"\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\n\n\"\"\"\nFunction to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) :\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(0, n) :\n        if (dp[i] != -1) :\n            if(i + a <= n ):\n                dp[i + a] = max(dp[i] + 1,\n                            dp[i + a])\n            if(i + b <= n ):\n                dp[i + b] = max(dp[i] + 1,\n                            dp[i + b])\n            if(i + c <= n ):\n                dp[i + c] = max(dp[i] + 1,\n                            dp[i + c])\n    return dp[n]\n\n\"\"\"\nFunction to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n  if x%2==0:\n     return True\n  else:\n    return False\n\n\"\"\"\nPython function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) :\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i] != str2[i] :\n            count += 1\n    if count % 2 == 0 :\n        return (count // 2)\n    else :\n        return (\"Not Possible\")\n\n\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;\n\n\"\"\"\nFunction to calculate the perimeter of a regular polygon.\n\"\"\"\nfrom math import tan, pi\ndef perimeter_polygon(s,l):\n  perimeter = s*l\n  return perimeter\n\n\"\"\"\nFunction to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\nfrom collections import Counter\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return (key)\n\n\"\"\"\nFunction to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ])\ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nFunction to remove multiple spaces in a string by using regex.\n\"\"\"\nimport re\ndef remove_multiple_spaces(text1):\n  return (re.sub(' +',' ',text1))\n\n\"\"\"\nFunction to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nPython function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) :\n    if ((b*b) - (4*a*c)) > 0 :\n        return (\"2 solutions\")\n    elif ((b*b) - (4*a*c)) == 0 :\n        return (\"1 solution\")\n    else :\n        return (\"No solutions\")\n\n\"\"\"\nFunction to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n):\n    sum = [0 for k in range(n)]\n    if n >= 1:\n        sum[0] = arr[0]\n    if n >= 2:\n        sum[1] = arr[0] + arr[1]\n    if n > 2:\n        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    for i in range(3, n):\n        sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n    return sum[n-1]\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)\n\n\"\"\"\nPython function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n    tmp = s[d : ] + s[0 : d]\n    return tmp\n\n\"\"\"\nPython function to replace multiple occurence of character by single.\n\"\"\"\nimport re\ndef replace(string, char):\n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string)\n    return string\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to extract year, month and date from a url by using regex.\n\"\"\"\nimport re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\n\n\"\"\"\nFunction to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef adjac(ele, sub = []):\n  if not ele:\n     yield sub\n  else:\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                for idx in adjac(ele[1:], sub + [j])]\ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)\n\n\"\"\"\nFunction to check for a number at the end of a string.\n\"\"\"\nimport re\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nPython function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range (2,n + 1):\n        if(prime[i]):\n            sum += i\n    return sum\n\n\"\"\"\nFunction to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict\n\n\"\"\"\nPython function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum):\n    ans = float(Sum)*1.0 /float(N);\n    return round(ans,2);\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nPython function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\ndef sum_Even(l,r):\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))\n\n\"\"\"\nFunction to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res)\n\n\"\"\"\nFunction to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\nMAX=1000;\ndef replace_spaces(string):\n  string=string.strip()\n  i=len(string)\n  space_count=string.count(' ')\n  new_length = i + space_count*2\n  if new_length > MAX:\n    return -1\n  index = new_length-1\n  string=list(string)\n  for f in range(i-2, new_length-2):\n    string.append('0')\n  for j in range(i-1, 0, -1):\n    if string[j] == ' ':\n      string[index] = '0'\n      string[index-1] = '2'\n      string[index-2] = '%'\n      index=index-3\n    else:\n      string[index] = string[j]\n      index -= 1\n  return ''.join(string)\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nPython function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string):\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5:\n    return ('accepted')\n  else:\n    return (\"not accepted\")\n\n\"\"\"\nFunction to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\nimport heapq\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n\n\"\"\"\nFunction to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):\n  count = tuplex.count(value)\n  return count\n\n\"\"\"\nFunction to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n      list1.sort()\n      list1.sort(key=len)\n      return  list1\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nPython function to check whether the count of divisors is even or odd.\n\"\"\"\nimport math\ndef count_Divisors(n) :\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) :\n        if (n % i == 0) :\n            if( n // i == i) :\n                count = count + 1\n            else :\n                count = count + 2\n    if (count % 2 == 0) :\n        return (\"Even\")\n    else :\n        return (\"Odd\")\n\n\"\"\"\nPython function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) :\n    i = 1\n    while i*i <= n :\n        j = 1\n        while (j*j <= n) :\n            if (i*i+j*j == n) :\n                return True\n            j = j+1\n        i = i+1\n    return False\n\n\"\"\"\nFunction to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)\n\n\"\"\"\nFunction to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n  area=(p*q)/2\n  return area\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\nFunction to get the length of a complex number.\n\"\"\"\nimport cmath\ndef len_complex(a,b):\n  cn=complex(a,b)\n  length=abs(cn)\n  return length\n\n\"\"\"\nPython function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2):\n    return (float)(y2-y1)/(x2-x1)\n\n\"\"\"\nPython function to get the position of rightmost set bit.\n\"\"\"\nimport math\ndef get_First_Set_Bit_Pos(n):\n     return math.log2(n&-n)+1\n\n\"\"\"\nFunction to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef find_ind(key, i, n,\n            k, arr):\n    ind = -1\n    start = i + 1\n    end = n - 1;\n    while (start < end):\n        mid = int(start +\n                (end - start) / 2)\n        if (arr[mid] - key <= k):\n            ind = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ind\ndef removals(arr, n, k):\n    ans = n - 1\n    arr.sort()\n    for i in range(0, n):\n        j = find_ind(arr[i], i,\n                    n, k, arr)\n        if (j != -1):\n            ans = min(ans, n -\n                        (j - i + 1))\n    return ans\n\n\"\"\"\nFunction to find three closest elements from three sorted arrays.\n\"\"\"\nimport sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]));\n        if maximum-minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum;\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i+1\n        elif B[j] == minimum:\n            j = j+1\n        else:\n            k = k+1\n    return A[res_i],B[res_j],C[res_k]\n\n\"\"\"\nFunction to return true if the password is valid.\n\"\"\"\nimport re\ndef pass_validity(p):\n x = True\n while x:\n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False\n\n\"\"\"\nFunction to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res)\n\n\"\"\"\nFunction to remove all characters except letters and numbers using regex\n\"\"\"\nimport re\ndef remove_char(S):\n  result = re.sub('[\\W_]+', '', S)\n  return result\n\n\"\"\"\nFunction to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result\n\n\"\"\"\nFunction to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\n\n\"\"\"\nFunction to increment the numeric values in the given strings by k.\n\"\"\"\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res\n\n\"\"\"\nFunction to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]\n  return res_list\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\"\"\"\ndef series_sum(number):\n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total\n\n\"\"\"\nFunction to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap\n\n\"\"\"\nFunction to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res)\n\n\"\"\"\nFunction to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(\n    test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))])\n  return str(res)\n\n\"\"\"\nPython function to find the average of a list.\n\"\"\"\ndef Average(lst):\n    return sum(lst) / len(lst)\n\n\"\"\"\nFunction to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\n\"\"\"\nPython function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n  return (string.upper())\n\n\"\"\"\nFunction to find the nth delannoy number.\n\"\"\"\ndef dealnnoy_num(n, m):\n    if (m == 0 or n == 0) :\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nFunction to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2):\n    return all(map(list1.__contains__,list2))\n\n\"\"\"\nFunction to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n    heapify(arr)\n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return\n\n\"\"\"\nFunction to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res\n\n\"\"\"\nFunction to iterate over elements repeating each as many times as its count.\n\"\"\"\nfrom collections import Counter\ndef count_variable(a,b,c,d):\n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nFunction to find the n - cheap price items from a given dataset using heap queue algorithm.\n\"\"\"\nimport heapq\ndef cheap_items(items,n):\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items\n\n\"\"\"\nFunction to find length of the string.\n\"\"\"\ndef string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n\"\"\"\nFunction to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\n\n\"\"\"\nFunction to generate all sublists of a given list.\n\"\"\"\nfrom itertools import combinations\ndef sub_lists(my_list):\n    subs = []\n    for i in range(0, len(my_list)+1):\n      temp = [list(x) for x in combinations(my_list, i)]\n      if len(temp)>0:\n        subs.extend(temp)\n    return subs\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nFunction to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\nfrom collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nPython function to find sum of odd factors of a number.\n\"\"\"\nimport math\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3,int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count+=1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res\n\n\"\"\"\nFunction to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return (res)\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n\n\"\"\"\nFunction to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\nimport re\ndef remove_extra_char(text1):\n  pattern = re.compile('[\\W_]+')\n  return (pattern.sub('', text1))\n\n\"\"\"\nFunction to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n):\n    hashset = set()\n    for i in range(0, m):\n        hashset.add(arr1[i])\n    for i in range(0, n):\n        if arr2[i] in hashset:\n            continue\n        else:\n            return False\n    return True\n\n\"\"\"\nFunction to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):\n result = list(map(list.__add__, list1, list2))\n return result\n\n\"\"\"\nFunction to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))\n\n\"\"\"\nFunction to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()\n  return  uniq_items[1]\n\n\"\"\"\nFunction to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n\n\"\"\"\nPython function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nPython function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) :\n    j = 0\n    sm = 0\n    for i in range(1,n + 1) :\n        j = (2*i-1)\n        sm = sm + (j*j*j*j)\n    return sm\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nFunction to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n  if x in d:\n    return True\n  else:\n     return False\n\n\"\"\"\nFunction to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] is i:\n            return i\n    return -1\n\n\"\"\"\nFunction to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nFunction to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res)\n\n\"\"\"\nFunction to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n  res = test_tup1 + test_tup2\n  return (res)", "func_error": "find_triplet_array", "context_length": 16000, "depth_percentage": 25, "guess": "prime_num", "is_correct": 0, "accuracy": 7.41}
{"code": "\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nFunction to reverse each list in a given list of lists.\n\"\"\"\ndef reverse_list_lists(lists):\n    for l in lists:\n        l.sort(reverse = True)\n    return lists\n\n\"\"\"\nPython function to find nth bell number.\n\"\"\"\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nFunction to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\nfrom itertools import groupby\ndef group_element(test_list):\n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val]\n  return (res)\n\n\"\"\"\nFunction to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nPython function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\n\n\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nPython function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n):\n    arr = sorted(arr)\n    diff = 10**20\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff\n\n\"\"\"\nPython function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nFunction to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount):\n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to convert tuple string to integer tuple.\n\"\"\"\ndef tuple_str_int(test_str):\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res)\n\n\"\"\"\nFunction to find length of the subarray having maximum sum.\n\"\"\"\nfrom sys import maxsize\ndef max_sub_array_sum(a,size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    return (end - start + 1)\n\n\"\"\"\nFunction to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res)\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction to calculate the perimeter of a regular polygon.\n\"\"\"\nfrom math import tan, pi\ndef perimeter_polygon(s,l):\n  perimeter = s*l\n  return perimeter\n\n\"\"\"\nFunction to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n\n\"\"\"\nFunction to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim\n\n\"\"\"\nPython function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1\n      return  number_ctr\n\n\"\"\"\nFunction to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to find the product of it\u2019s kth index in the given tuples.\n\"\"\"\ndef get_product(val) :\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to remove all whitespaces from a string.\n\"\"\"\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\n\n\"\"\"\nPython function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):\n    for i in range (len( s) - 2) :\n        if (s[i] != s[i + 2]) :\n            return False\n    if (s[0] == s[1]):\n        return False\n    return True\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nPython function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list):\n    for item in num_list:\n        if item < 0:\n           num_list.remove(item)\n    return num_list\n\n\"\"\"\nFunction to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n\n\"\"\"\nPython function to find the average of a list.\n\"\"\"\ndef Average(lst):\n    return sum(lst) / len(lst)\n\n\"\"\"\nFunction to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)\n\n\"\"\"\nPython function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :\n    n += 1;\n    powerOf2 = 2;\n    cnt = n // 2;\n    while (powerOf2 <= n) :\n        totalPairs = n // powerOf2;\n        cnt += (totalPairs // 2) * powerOf2;\n        if (totalPairs & 1) :\n            cnt += (n % powerOf2)\n        else :\n            cnt += 0\n        powerOf2 <<= 1;\n    return cnt;\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap\n\n\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nFunction to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n  if x%2==0:\n     return True\n  else:\n    return False\n\n\"\"\"\nPython function to set the right most unset bit.\n\"\"\"\nimport math\ndef get_Pos_Of_Right_most_Set_Bit(n):\n    return int(math.log2(n&-n)+1)\ndef set_Right_most_Unset_Bit(n):\n    if (n == 0):\n        return 1\n    if ((n & (n + 1)) == 0):\n        return n\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)\n    return ((1 << (pos - 1)) | n)\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\"\"\"\nimport math\ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total\n\n\"\"\"\nFunction to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]\n\n\"\"\"\nFunction to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\nfrom itertools import groupby\ndef extract_elements(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result\n\n\"\"\"\nFunction to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)\n\n\"\"\"\nPython function to convert a list of multiple integers into a single integer.\n\"\"\"\ndef convert(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return (res)\n\n\"\"\"\nPython function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list):\n    return len(input_list)\n\n\"\"\"\nPython function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True\n\n\"\"\"\nFunction to check if the given expression is balanced or not.\n\"\"\"\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n\n\"\"\"\nFunction to convert degrees to radians.\n\"\"\"\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\n\n\"\"\"\nPython function to replace multiple occurence of character by single.\n\"\"\"\nimport re\ndef replace(string, char):\n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string)\n    return string\n\n\"\"\"\nPython function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 1):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\n\n\"\"\"\nFunction to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength\n\n\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nPython function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nFunction to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n    discriminant = (y**2) - (4*x*z)\n    if discriminant > 0:\n        return (\"Two solutions\",discriminant)\n    elif discriminant == 0:\n        return (\"one solution\",discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\",discriminant)\n\n\"\"\"\nFunction to extract the maximum numeric value from a string by using regex.\n\"\"\"\nimport re\ndef extract_max(input):\n    numbers = re.findall('\\d+',input)\n    numbers = map(int,numbers)\n    return max(numbers)\n\n\"\"\"\nPython function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range (2,n + 1):\n        if(prime[i]):\n            sum += i\n    return sum\n\n\"\"\"\nFunction to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers)\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nPython function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k):\n    arr = [0] * n;\n    i = 0;\n    odd = 1;\n    while (odd <= n):\n        arr[i] = odd;\n        i += 1;\n        odd += 2;\n    even = 2;\n    while (even <= n):\n        arr[i] = even;\n        i += 1;\n        even += 2;\n    return arr[k - 1];\n\n\"\"\"\nFunction to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\nimport re\ndef remove_extra_char(text1):\n  pattern = re.compile('[\\W_]+')\n  return (pattern.sub('', text1))\n\n\"\"\"\nFunction to add a dictionary to the tuple.\n\"\"\"\ndef add_dict_to_tuple(test_tup, test_dict):\n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup)\n\n\"\"\"\nFunction to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n\n\"\"\"\nFunction to locate the right insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n\n\"\"\"\nFunction to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n  res = test_tup1 + test_tup2\n  return (res)\n\n\"\"\"\nFunction to group a sequence of key-value pairs into a dictionary of lists using collections module.\n\"\"\"\nfrom collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n\"\"\"\nFunction to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n\n\"\"\"\nFunction to find length of the string.\n\"\"\"\ndef string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n\"\"\"\nFunction to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res\n\n\"\"\"\nPython function to check whether the given number is odd or not using bitwise operator.\n\"\"\"\ndef is_odd(n) :\n    if (n^1 == n-1) :\n        return True;\n    else :\n        return False;\n\n\"\"\"\nFunction to check whether the given string is starting with a vowel or not using regex.\n\"\"\"\nimport re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    if(re.search(regex, string)):\n        return (\"Valid\")\n    else:\n        return (\"Invalid\")\n\n\"\"\"\nFunction that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\nimport re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nFunction to find the lateral surface area of a cone.\n\"\"\"\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\n\n\"\"\"\nFunction to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n\n\"\"\"\nFunction to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    return y\n\n\"\"\"\nPython function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N):\n    SumOfPrimeDivisors = [0]*(N + 1)\n    for i in range(2,N + 1) :\n        if (SumOfPrimeDivisors[i] == 0) :\n            for j in range(i,N + 1,i) :\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n\n\"\"\"\nPython function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) :\n    ans = 0\n    for i in range(0,n) :\n        for j in range(i + 1,n) :\n            ans = ans + (arr[i] ^ arr[j])\n    return ans\n\n\"\"\"\nFunction to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] is i:\n            return i\n    return -1\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef factorial(start,end):\n    res = 1\n    for i in range(start,end + 1):\n        res *= i\n    return res\ndef sum_of_square(n):\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n))\n\n\"\"\"\nFunction to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1\n\n\"\"\"\nFunction to locate the left insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n\n\"\"\"\nFunction to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c):\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180):\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\"\"\"\nFunction to check for a number at the end of a string.\n\"\"\"\nimport re\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the longest common subsequence for the given three string sequence.\n\"\"\"\ndef lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for i in range(o+1)] for j in range(n+1)]\n        for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and\n                    X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k],\n                    L[i][j-1][k]),\n                                    L[i][j][k-1])\n    return L[m][n][o]\n\n\"\"\"\nFunction to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to remove duplicate words from a given string using collections module.\n\"\"\"\nfrom collections import OrderedDict\ndef remove_duplicate(string):\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result\n\n\"\"\"\nPython function to check whether an array contains only one distinct element or not.\n\"\"\"\ndef unique_Element(arr,n):\n    s = set(arr)\n    if (len(s) == 1):\n        return ('YES')\n    else:\n        return ('NO')\n\n\"\"\"\nPython function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst):\n    return [item[-1] for item in lst]\n\n\"\"\"\nFunction to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n  if x in d:\n    return True\n  else:\n     return False\n\n\"\"\"\nPython function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nFunction to find nth polite number.\n\"\"\"\nimport math\ndef is_polite(n):\n    n = n + 1\n    return (int)(n+(math.log((n + math.log(n, 2)), 2)))\n\n\"\"\"\nFunction to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1;\n    for i in range(n - 2, -1, -1):\n        mxm = 0;\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)\n\n\"\"\"\nFunction to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1\n\n\"\"\"\nPython function to find the type of triangle from the given sides.\n\"\"\"\ndef check_Type_Of_Triangle(a,b,c):\n    sqa = pow(a,2)\n    sqb = pow(b,2)\n    sqc = pow(c,2)\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb):\n        return (\"Right-angled Triangle\")\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb):\n        return (\"Obtuse-angled Triangle\")\n    else:\n        return (\"Acute-angled Triangle\")\n\n\"\"\"\nFunction to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nFunction to extract year, month and date from a url by using regex.\n\"\"\"\nimport re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\n\n\"\"\"\nFunction to find the occurrences of n most common words in a given text.\n\"\"\"\nfrom collections import Counter\nimport re\ndef n_common_words(text,n):\n  words = re.findall('\\w+',text)\n  n_common_words= Counter(words).most_common(n)\n  return list(n_common_words)\n\n\"\"\"\nFunction to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) :\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(0, n) :\n        if (dp[i] != -1) :\n            if(i + a <= n ):\n                dp[i + a] = max(dp[i] + 1,\n                            dp[i + a])\n            if(i + b <= n ):\n                dp[i + b] = max(dp[i] + 1,\n                            dp[i + b])\n            if(i + c <= n ):\n                dp[i + c] = max(dp[i] + 1,\n                            dp[i + c])\n    return dp[n]\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nFunction to convert camel case string to snake case string by using regex.\n\"\"\"\nimport re\ndef camel_to_snake(text):\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nFunction to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nPython function to check whether the count of divisors is even or odd.\n\"\"\"\nimport math\ndef count_Divisors(n) :\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) :\n        if (n % i == 0) :\n            if( n // i == i) :\n                count = count + 1\n            else :\n                count = count + 2\n    if (count % 2 == 0) :\n        return (\"Even\")\n    else :\n        return (\"Odd\")\n\n\"\"\"\nFunction to validate a gregorian date.\n\"\"\"\ndef check_date(day, month, year):\n    from datetime import datetime\n    try:\n        d = int(day)\n        m = int(month)\n        y = int(year)\n        datetime(y, m, d)\n        return True\n    except:\n        return False\n\n\"\"\"\nFunction to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res)\n\n\"\"\"\nFunction to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n\n\"\"\"\nFunction to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\nfrom collections import Counter\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return (key)\n\n\"\"\"\nFunction to clear the values of the given tuples.\n\"\"\"\ndef clear_tuple(test_tup):\n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup)\n\n\"\"\"\nFunction to find ln, m lobb number.\n\"\"\"\ndef binomial_coeff(n, k):\n    C = [[0 for j in range(k + 1)]\n            for i in range(n + 1)]\n    for i in range(0, n + 1):\n        for j in range(0, min(i, k) + 1):\n            if (j == 0 or j == i):\n                C[i][j] = 1\n            else:\n                C[i][j] = (C[i - 1][j - 1]\n                            + C[i - 1][j])\n    return C[n][k]\ndef lobb_num(n, m):\n    return (((2 * m + 1) *\n        binomial_coeff(2 * n, m + n))\n                    / (m + n + 1))\n\n\"\"\"\nFunction to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)\n\n\"\"\"\nFunction to convert the given string of float type into tuple.\n\"\"\"\ndef float_to_tuple(test_str):\n  res = tuple(map(float, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nFunction to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list):\n    return (len(input_list))**2\n\n\"\"\"\nFunction to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n    if (not m):\n        return n\n    if (not n):\n        return m\n    if (X[m - 1] == Y[n - 1]):\n        return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + min(super_seq(X, Y, m - 1, n),    super_seq(X, Y, m, n - 1))\n\n\"\"\"\nFunction to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count\n\n\"\"\"\nFunction to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):\n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nFunction to remove the parenthesis area in a string.\n\"\"\"\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\n\n\"\"\"\nFunction to find the sequences of one upper case letter followed by lower case letters.\n\"\"\"\nimport re\ndef text_uppercase_lowercase(text):\n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n\"\"\"\nPython function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n\n\"\"\"\nFunction to sum elements in two lists.\n\"\"\"\ndef sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]\n  return res_list\n\n\"\"\"\nFunction to calculate the height of the given binary tree.\n\"\"\"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef max_height(node):\n    if node is None:\n        return 0 ;\n    else :\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if (left_height > right_height):\n            return left_height+1\n        else:\n            return right_height+1\n\n\"\"\"\nFunction to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n):\n    hashset = set()\n    for i in range(0, m):\n        hashset.add(arr1[i])\n    for i in range(0, n):\n        if arr2[i] in hashset:\n            continue\n        else:\n            return False\n    return True\n\n\"\"\"\nPython function to check if the string is a concatenation of another string.\n\"\"\"\ndef check_Concat(str1,str2):\n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False\n    return True\n\n\"\"\"\nFunction to combine two dictionaries by adding values for common keys.\n\"\"\"\nfrom collections import Counter\ndef add_dict(d1,d2):\n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict\n\n\"\"\"\nPython function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n\n\"\"\"\nFunction to zip two given lists of lists.\n\"\"\"\ndef zip_list(list1,list2):\n result = list(map(list.__add__, list1, list2))\n return result\n\n\"\"\"\nPython function to count the number of digits in factorial of a given number.\n\"\"\"\nimport math\ndef find_Digits(n):\n    if (n < 0):\n        return 0;\n    if (n <= 1):\n        return 1;\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));\n    return math.floor(x) + 1;\n\n\"\"\"\nFunction to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n\n\"\"\"\nPython function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to get the length of a complex number.\n\"\"\"\nimport cmath\ndef len_complex(a,b):\n  cn=complex(a,b)\n  length=abs(cn)\n  return length\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nFunction to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n\"\"\"\nfrom itertools import zip_longest, chain, tee\ndef exchange_elements(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nPython function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n  str1 = str1.replace(' ','')\n  return str1\n\n\"\"\"\nFunction where a string will start with a specific number.\n\"\"\"\nimport re\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n):\n    sum = [0 for k in range(n)]\n    if n >= 1:\n        sum[0] = arr[0]\n    if n >= 2:\n        sum[1] = arr[0] + arr[1]\n    if n > 2:\n        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    for i in range(3, n):\n        sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n    return sum[n-1]\n\n\"\"\"\nPython function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n):\n    cnt = 0;\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] == arr[j]):\n                cnt += 1;\n    return cnt;\n\n\"\"\"\nPython function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n\"\"\"\nFunction to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction to check if each element of second tuple is smaller than its corresponding index in first tuple.\n\"\"\"\ndef check_smaller(test_tup1, test_tup2):\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nFunction to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result\n\n\"\"\"\nFunction to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nPython function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort()\n    sum = 0\n    for i in range(n):\n        sum = sum + abs(a[i] - b[i])\n    return sum\n\n\"\"\"\nFunction to extract values between quotation marks of the given string by using regex.\n\"\"\"\nimport re\ndef extract_quotation(text1):\n  return (re.findall(r'\"(.*?)\"', text1))\n\n\"\"\"\nPython function to check whether all the characters are same or not.\n\"\"\"\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True\n\n\"\"\"\nPython function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) :\n    if ((b*b) - (4*a*c)) > 0 :\n        return (\"2 solutions\")\n    elif ((b*b) - (4*a*c)) == 0 :\n        return (\"1 solution\")\n    else :\n        return (\"No solutions\")\n\n\"\"\"\nPython function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No\n\n\"\"\"\nPython function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum):\n    ans = float(Sum)*1.0 /float(N);\n    return round(ans,2);\n\n\"\"\"\nPython function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word)%2==0:\n            return True\n        else:\n          return False\n\n\"\"\"\nFunction to convert an integer into a roman numeral.\n\"\"\"\ndef int_to_roman( num):\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n\"\"\"\nFunction to access dictionary key\u2019s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n  return list(ditionary)[key]\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nFunction to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n      list1.sort()\n      list1.sort(key=len)\n      return  list1\n\n\"\"\"\nFunction to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res)\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nFunction to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\"\"\"\nFunction to find the maximum value in record list as tuple attribute in the given tuple list.\n\"\"\"\ndef maximum_value(test_list):\n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res)\n\n\"\"\"\nPython function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n\n\"\"\"\nPython function to count number of vowels in the string.\n\"\"\"\ndef Check_Vow(string, vowels):\n    final = [each for each in string if each in vowels]\n    return(len(final))\n\n\"\"\"\nPython function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if (num == new_num):\n        return True\n    return False\n\n\"\"\"\nPython function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))\n\n\"\"\"\nFunction to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res)\n\n\"\"\"\nFunction to find the frequency of each element in the given list.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(test_tup):\n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res)))\n\n\"\"\"\nPython function to find the minimun number of subsets with distinct elements.\n\"\"\"\ndef subset(ar, n):\n    res = 0\n    ar.sort()\n    for i in range(0, n) :\n        count = 1\n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count+=1\n            else:\n                break\n        res = max(res, count)\n    return res\n\n\"\"\"\nFunction to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef find_ind(key, i, n,\n            k, arr):\n    ind = -1\n    start = i + 1\n    end = n - 1;\n    while (start < end):\n        mid = int(start +\n                (end - start) / 2)\n        if (arr[mid] - key <= k):\n            ind = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ind\ndef removals(arr, n, k):\n    ans = n - 1\n    arr.sort()\n    for i in range(0, n):\n        j = find_ind(arr[i], i,\n                    n, k, arr)\n        if (j != -1):\n            ans = min(ans, n -\n                        (j - i + 1))\n    return ans\n\n\"\"\"\nFunction to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n  area=(p*q)/2\n  return area\n\n\"\"\"\nFunction to find three closest elements from three sorted arrays.\n\"\"\"\nimport sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]));\n        if maximum-minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum;\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i+1\n        elif B[j] == minimum:\n            j = j+1\n        else:\n            k = k+1\n    return A[res_i],B[res_j],C[res_k]\n\n\"\"\"\nFunction to remove all characters except letters and numbers using regex\n\"\"\"\nimport re\ndef remove_char(S):\n  result = re.sub('[\\W_]+', '', S)\n  return result\n\n\"\"\"\nFunction to remove multiple spaces in a string.\n\"\"\"\nimport re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))\n\n\"\"\"\nPython function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n):\n    if n < 10:\n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n//10\n        if n == 0:\n            break;\n        digit = n % 10\n        prodEven *= digit\n        n = n//10\n    if prodOdd == prodEven:\n        return True\n    return False\n\n\"\"\"\nPython function to convert a string to a list.\n\"\"\"\ndef Convert(string):\n    li = list(string.split(\" \"))\n    return li\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\"\"\"\ndef series_sum(number):\n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nFunction to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)\n\n\"\"\"\nFunction to check if the string is a valid email address or not using regex.\n\"\"\"\nimport re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email):\n    if(re.search(regex,email)):\n        return (\"Valid Email\")\n    else:\n        return (\"Invalid Email\")\n\n\"\"\"\nFunction to find the item with maximum occurrences in a given list.\n\"\"\"\ndef max_occurrences(list1):\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result\n\n\"\"\"\nPython function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to move all the numbers in it to the given string.\n\"\"\"\ndef move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res)\n\n\"\"\"\nFunction to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef adjac(ele, sub = []):\n  if not ele:\n     yield sub\n  else:\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                for idx in adjac(ele[1:], sub + [j])]\ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)\n\n\"\"\"\nFunction to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n]\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nFunction to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\n\n\"\"\"\nFunction to check if the given string starts with a substring using regex.\n\"\"\"\nimport re\ndef check_substring(string, sample) :\n  if (sample in string):\n      y = \"\\A\" + sample\n      x = re.search(y, string)\n      if x :\n          return (\"string starts with the given substring\")\n      else :\n          return (\"string doesnt start with the given substring\")\n  else :\n      return (\"entered string isnt a substring\")\n\n\"\"\"\nPython function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n    tmp = s[d : ] + s[0 : d]\n    return tmp\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nFunction to count coin change.\n\"\"\"\ndef coin_change(S, m, n):\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m-1]\n\n\"\"\"\nFunction to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n  res = test_list1 == test_list2\n  return (res)\n\n\"\"\"\nPython function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) :\n    sm = 0\n    for i in range(1,n+1) :\n        sm = sm + (i*i*i*i*i)\n    return sm\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nFunction to get dictionary keys as a list.\n\"\"\"\ndef get_key(dict):\n    list = []\n    for key in dict.keys():\n        list.append(key)\n    return list\n\n\"\"\"\nPython function to check if roots of a quadratic equation are reciprocal of each other or not.\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (a == c):\n        return (\"Yes\");\n    else:\n        return (\"No\");\n\n\"\"\"\nFunction to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n\n\"\"\"\nPython function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):\n    odd = 0\n    for i in range(n):\n        if (arr[i] % 2):\n            odd += 1\n    if (odd % 2):\n        return 1\n    return 2\n\n\"\"\"\nFunction to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\nMAX=1000;\ndef replace_spaces(string):\n  string=string.strip()\n  i=len(string)\n  space_count=string.count(' ')\n  new_length = i + space_count*2\n  if new_length > MAX:\n    return -1\n  index = new_length-1\n  string=list(string)\n  for f in range(i-2, new_length-2):\n    string.append('0')\n  for j in range(i-1, 0, -1):\n    if string[j] == ' ':\n      string[index] = '0'\n      string[index-1] = '2'\n      string[index-2] = '%'\n      index=index-3\n    else:\n      string[index] = string[j]\n      index -= 1\n  return ''.join(string)\n\n\"\"\"\nFunction to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result", "func_error": "check_date", "context_length": 16000, "depth_percentage": 50, "guess": "reverse_list_lists", "is_correct": 0, "accuracy": 7.14}
{"code": "\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nFunction to create a new tuple from the given string and list.\n\"\"\"\ndef new_tuple(test_list, test_str):\n  res = tuple(test_list + [test_str])\n  return (res)\n\n\"\"\"\nPython function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nFunction to check if the string is a valid email address or not using regex.\n\"\"\"\nimport re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email):\n    if(re.search(regex,email)):\n        return (\"Valid Email\")\n    else:\n        return (\"Invalid Email\")\n\n\"\"\"\nPython function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\ndef sum_Even(l,r):\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))\n\n\"\"\"\nFunction to reverse words in a given string.\n\"\"\"\ndef reverse_words(s):\n        return ' '.join(reversed(s.split()))\n\n\"\"\"\nFunction to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list):\n    return (len(input_list))**2\n\n\"\"\"\nFunction to find the length of the shortest string that has both str1 and str2 as subsequences.\n\"\"\"\ndef super_seq(X, Y, m, n):\n    if (not m):\n        return n\n    if (not n):\n        return m\n    if (X[m - 1] == Y[n - 1]):\n        return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + min(super_seq(X, Y, m - 1, n),    super_seq(X, Y, m, n - 1))\n\n\"\"\"\nFunction to find minimum k records from tuple list.\n\"\"\"\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)\n\n\"\"\"\nFunction to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):\n  count = tuplex.count(value)\n  return count\n\n\"\"\"\nPython function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n\"\"\"\nFunction to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\nimport re\nregex = '[a-zA-z0-9]$'\ndef check_alphanumeric(string):\n    if(re.search(regex, string)):\n        return (\"Accept\")\n    else:\n        return (\"Discard\")\n\n\"\"\"\nFunction to find the list in a list of lists whose sum of elements is the highest.\n\"\"\"\ndef max_sum_list(lists):\n return max(lists, key=sum)\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nFunction to sort a list of lists by length and value.\n\"\"\"\ndef sort_sublists(list1):\n      list1.sort()\n      list1.sort(key=len)\n      return  list1\n\n\"\"\"\nFunction to find maximum of three numbers.\n\"\"\"\ndef max_of_three(num1,num2,num3):\n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum\n\n\"\"\"\nFunction to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n\n\"\"\"\nFunction to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n\n\"\"\"\nPython function to find the average of a list.\n\"\"\"\ndef Average(lst):\n    return sum(lst) / len(lst)\n\n\"\"\"\nFunction to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction to calculate the discriminant value.\n\"\"\"\ndef discriminant_value(x,y,z):\n    discriminant = (y**2) - (4*x*z)\n    if discriminant > 0:\n        return (\"Two solutions\",discriminant)\n    elif discriminant == 0:\n        return (\"one solution\",discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\",discriminant)\n\n\"\"\"\nFunction where a string will start with a specific number.\n\"\"\"\nimport re\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range (2,n + 1):\n        if(prime[i]):\n            sum += i\n    return sum\n\n\"\"\"\nFunction to calculate the perimeter of a regular polygon.\n\"\"\"\nfrom math import tan, pi\ndef perimeter_polygon(s,l):\n  perimeter = s*l\n  return perimeter\n\n\"\"\"\nFunction to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\n\n\"\"\"\nFunction to check whether the given amount has no profit and no loss\n\"\"\"\ndef noprofit_noloss(actual_cost,sale_amount):\n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to check whether the given month number contains 28 days or not.\n\"\"\"\ndef check_monthnum_number(monthnum1):\n  if monthnum1 == 2:\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst):\n    return [item[-1] for item in lst]\n\n\"\"\"\nFunction to find out the second most repeated (or frequent) string in the given sequence.\n\"\"\"\nfrom collections import Counter\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for (key, val) in dict.items():\n        if val == second_large:\n            return (key)\n\n\"\"\"\nFunction to extract specified number of elements from a given list, which follow each other continuously.\n\"\"\"\nfrom itertools import groupby\ndef extract_elements(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result\n\n\"\"\"\nPython function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):\n    odd = 0\n    for i in range(n):\n        if (arr[i] % 2):\n            odd += 1\n    if (odd % 2):\n        return 1\n    return 2\n\n\"\"\"\nFunction to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\n\n\"\"\"\nFunction to convert the given tuples into set.\n\"\"\"\ndef tuple_to_set(t):\n  s = set(t)\n  return (s)\n\n\"\"\"\nFunction to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n\n\"\"\"\nFunction to locate the left insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n\n\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nPython function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum):\n    ans = float(Sum)*1.0 /float(N);\n    return round(ans,2);\n\n\"\"\"\nPython function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end):\n    if (start > end):\n        return end + 1\n    if (start != array[start]):\n        return start;\n    mid = int((start + end) / 2)\n    if (array[mid] == mid):\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid)\n\n\"\"\"\nFunction to divide two lists using map and lambda function.\n\"\"\"\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nFunction to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n\n\"\"\"\nPython function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) :\n    if ((b*b) - (4*a*c)) > 0 :\n        return (\"2 solutions\")\n    elif ((b*b) - (4*a*c)) == 0 :\n        return (\"1 solution\")\n    else :\n        return (\"No solutions\")\n\n\"\"\"\nFunction to find the perimeter of a rombus.\n\"\"\"\ndef rombus_perimeter(a):\n  perimeter=4*a\n  return perimeter\n\n\"\"\"\nPython function to find the index of smallest triangular number with n digits.\n\"\"\"\nimport math\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);\n\n\"\"\"\nPython function to access multiple elements of specified index from a given list.\n\"\"\"\ndef access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result\n\n\"\"\"\nFunction to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)\n\n\"\"\"\nPython function to get the difference between two lists.\n\"\"\"\ndef Diff(li1,li2):\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n\n\"\"\"\nPython function to count the number of digits in factorial of a given number.\n\"\"\"\nimport math\ndef find_Digits(n):\n    if (n < 0):\n        return 0;\n    if (n <= 1):\n        return 1;\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));\n    return math.floor(x) + 1;\n\n\"\"\"\nPython function to move all zeroes to the end of the given list.\n\"\"\"\ndef move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1;\n    for i in range(n - 2, -1, -1):\n        mxm = 0;\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)\n\n\"\"\"\nFunction to sort a list in a dictionary.\n\"\"\"\ndef sorted_dict(dict1):\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nPython function to find sum of odd factors of a number.\n\"\"\"\nimport math\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3,int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count+=1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res\n\n\"\"\"\nFunction to find the maximum of similar indices in two lists of tuples.\n\"\"\"\ndef max_similar_indices(test_list1, test_list2):\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res)\n\n\"\"\"\nFunction to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\"\"\"\nimport re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)\n\n\"\"\"\nFunction to find the product of it\u2019s kth index in the given tuples.\n\"\"\"\ndef get_product(val) :\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\ndef find_k_product(test_list, K):\n  res = get_product([sub[K] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to find the frequency of each element in the given list.\n\"\"\"\nfrom collections import defaultdict\ndef freq_element(test_tup):\n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res)))\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nPython function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nFunction to count the same pair in two given lists using map function.\n\"\"\"\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n\n\"\"\"\nPython function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n  str1 = str1.replace(' ','')\n  return str1\n\n\"\"\"\nFunction to check whether the given ip address is valid or not using regex.\n\"\"\"\nimport re\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\ndef check_IP(Ip):\n    if(re.search(regex, Ip)):\n        return (\"Valid IP address\")\n    else:\n        return (\"Invalid IP address\")\n\n\"\"\"\nFunction to find the lateral surface area of a cone.\n\"\"\"\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\n\n\"\"\"\nFunction to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res)\n\n\"\"\"\nPython function to count numeric values in a given string.\n\"\"\"\ndef number_ctr(str):\n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1\n      return  number_ctr\n\n\"\"\"\nFunction to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n  res = False\n  for ele in check_list:\n    if ele in test_tup:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nFunction to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ])\ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))\n\n\"\"\"\nPython function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(n):\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1\ndef sum_in_Range(l,r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n\n\"\"\"\nFunction to check if a triangle of positive area is possible with the given angles.\n\"\"\"\ndef is_triangleexists(a,b,c):\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180):\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums\n\n\"\"\"\nFunction to find length of the subarray having maximum sum.\n\"\"\"\nfrom sys import maxsize\ndef max_sub_array_sum(a,size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    return (end - start + 1)\n\n\"\"\"\nPython function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n):\n    cnt = 0;\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] == arr[j]):\n                cnt += 1;\n    return cnt;\n\n\"\"\"\nPython function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) :\n    sm = 0\n    for i in range(1,n+1) :\n        sm = sm + (i*i*i*i*i)\n    return sm\n\n\"\"\"\nFunction to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res)\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nFunction to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result\n\n\"\"\"\nFunction to remove consecutive duplicates of a given list.\n\"\"\"\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n\n\"\"\"\nFunction to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nFunction to find three closest elements from three sorted arrays.\n\"\"\"\nimport sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]));\n        if maximum-minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum;\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i+1\n        elif B[j] == minimum:\n            j = j+1\n        else:\n            k = k+1\n    return A[res_i],B[res_j],C[res_k]\n\n\"\"\"\nFunction to count number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in  list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to count the most common character in a given string.\n\"\"\"\nfrom collections import Counter\ndef max_char(str1):\n    temp = Counter(str1)\n    max_char = max(temp, key = temp.get)\n    return max_char\n\n\"\"\"\nFunction to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n area = 0.5 * (base1 + base2) * height\n return area\n\n\"\"\"\nFunction to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res)\n\n\"\"\"\nPython function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n    x = min(B - 1,N)\n    return (A*x) // B\n\n\"\"\"\nPython function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\n\n\"\"\"\nFunction to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nFunction to find numbers divisible by m and n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n return result\n\n\"\"\"\nPython function to find the minimum difference between any two elements in a given array.\n\"\"\"\ndef find_Min_Diff(arr,n):\n    arr = sorted(arr)\n    diff = 10**20\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    return diff\n\n\"\"\"\nPython function to check whether the given strings are rotations of each other or not.\n\"\"\"\ndef are_Rotations(string1,string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if (temp.count(string2)> 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to find the length of the last word in a given string.\n\"\"\"\ndef length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n\n\"\"\"\nPython function to count lower case letters in a given string.\n\"\"\"\ndef lower_ctr(str):\n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1\n      return  lower_ctr\n\n\"\"\"\nFunction to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nFunction to remove an empty tuple from a list of tuples.\n\"\"\"\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n\n\"\"\"\nPython function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated\n\n\"\"\"\nFunction to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)\n\n\"\"\"\nFunction to find the most common elements and their counts of a specified text.\n\"\"\"\nfrom collections import Counter\ndef most_common_elem(s,a):\n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem\n\n\"\"\"\nPython function to find the sum of fourth power of first n odd natural numbers.\n\"\"\"\ndef odd_Num_Sum(n) :\n    j = 0\n    sm = 0\n    for i in range(1,n + 1) :\n        j = (2*i-1)\n        sm = sm + (j*j*j*j)\n    return sm\n\n\"\"\"\nFunction to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nFunction to add two lists using map and lambda function.\n\"\"\"\ndef add_list(nums1,nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to count occurences of a character in a repeated string.\n\"\"\"\ndef count_Char(str,x):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == x) :\n            count += 1\n    n = 10\n    repititions = n // len(str)\n    count = count * repititions\n    l = n % len(str)\n    for i in range(l):\n        if (str[i] == x):\n            count += 1\n    return count\n\n\"\"\"\nPython function to check whether the count of divisors is even or odd.\n\"\"\"\nimport math\ndef count_Divisors(n) :\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) :\n        if (n % i == 0) :\n            if( n // i == i) :\n                count = count + 1\n            else :\n                count = count + 2\n    if (count % 2 == 0) :\n        return (\"Even\")\n    else :\n        return (\"Odd\")\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\nFunction to count occurrence of a character in a string.\n\"\"\"\ndef count_char(string,char):\n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nFunction to check if one tuple is a subset of another tuple.\n\"\"\"\ndef check_subset(test_tup1, test_tup2):\n  res = set(test_tup2).issubset(test_tup1)\n  return (res)\n\n\"\"\"\nPython function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef factorial(start,end):\n    res = 1\n    for i in range(start,end + 1):\n        res *= i\n    return res\ndef sum_of_square(n):\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n))\n\n\"\"\"\nFunction to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to create a list taking alternate elements from another given list.\n\"\"\"\ndef alternate_elements(list1):\n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result\n\n\"\"\"\nFunction to find the minimum number of platforms required for a railway/bus station.\n\"\"\"\ndef find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):\n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result\n\n\"\"\"\nPython function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n):\n    for i in range(0,n):\n        if ((arr[i] & 1) == 0):\n            return True\n    return False\n\n\"\"\"\nPython function to check for odd parity of a given number.\n\"\"\"\ndef check_Odd_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 1):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to count the number of elements in a list which are within a specific range.\n\"\"\"\ndef count_range_in_list(li, min, max):\n    ctr = 0\n    for x in li:\n        if min <= x <= max:\n            ctr += 1\n    return ctr\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n\n\"\"\"\nFunction to remove multiple spaces in a string by using regex.\n\"\"\"\nimport re\ndef remove_multiple_spaces(text1):\n  return (re.sub(' +',' ',text1))\n\n\"\"\"\nFunction to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers)\n\n\"\"\"\nPython function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nPython function to sort the given string.\n\"\"\"\ndef sort_String(str) :\n    str = ''.join(sorted(str))\n    return (str)\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nFunction to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)\n\n\"\"\"\nFunction to group the 1st elements on the basis of 2nd elements in the given tuple list.\n\"\"\"\nfrom itertools import groupby\ndef group_element(test_list):\n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val]\n  return (res)\n\n\"\"\"\nFunction to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n\n\"\"\"\nFunction to filter the height and width of students which are stored in a dictionary.\n\"\"\"\ndef filter_data(students,h,w):\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result\n\n\"\"\"\nFunction to count the elements in a list until an element is a tuple.\n\"\"\"\ndef count_elim(num):\n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim\n\n\"\"\"\nFunction to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res)\n\n\"\"\"\nPython function to convert a string to a list.\n\"\"\"\ndef Convert(string):\n    li = list(string.split(\" \"))\n    return li\n\n\"\"\"\nPython function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) :\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i] != str2[i] :\n            count += 1\n    if count % 2 == 0 :\n        return (count // 2)\n    else :\n        return (\"Not Possible\")\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')\n\n\"\"\"\nPython function to calculate the sum of the numbers in a list between the indices of a specified range.\n\"\"\"\ndef sum_Range_list(nums, m, n):\n    sum_range = 0\n    for i in range(m, n+1, 1):\n        sum_range += nums[i]\n    return sum_range\n\n\"\"\"\nFunction to find the perimeter of a rectangle.\n\"\"\"\ndef rectangle_perimeter(l,b):\n  perimeter=2*(l+b)\n  return perimeter\n\n\"\"\"\nPython function to find the slope of a line.\n\"\"\"\ndef slope(x1,y1,x2,y2):\n    return (float)(y2-y1)/(x2-x1)\n\n\"\"\"\nFunction to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nFunction to find length of the string.\n\"\"\"\ndef string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n\"\"\"\nPython function to check whether a sequence of numbers has a decreasing trend or not.\n\"\"\"\ndef decreasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nFunction to find numbers divisible by m or n from a list of numbers using lambda function.\n\"\"\"\ndef div_of_nums(nums,m,n):\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n return result\n\n\"\"\"\nFunction that matches a string that has an a followed by three 'b'.\n\"\"\"\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to remove duplicate words from a given string using collections module.\n\"\"\"\nfrom collections import OrderedDict\ndef remove_duplicate(string):\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result\n\n\"\"\"\nFunction to convert rgb color to hsv color.\n\"\"\"\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n\n\"\"\"\nFunction to iterate over elements repeating each as many times as its count.\n\"\"\"\nfrom collections import Counter\ndef count_variable(a,b,c,d):\n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())\n\n\"\"\"\nFunction to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\nM = 100\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j],\n                        dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n\n\"\"\"\nFunction to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)\n\n\"\"\"\nPython function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list):\n    for item in num_list:\n        if item < 0:\n           num_list.remove(item)\n    return num_list\n\n\"\"\"\nFunction to count unique keys for each value present in the tuple.\n\"\"\"\nfrom collections import defaultdict\ndef get_unique(test_list):\n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict))\n\n\"\"\"\nPython function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n) :\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n    return sum\n\n\"\"\"\nPython function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :\n    n += 1;\n    powerOf2 = 2;\n    cnt = n // 2;\n    while (powerOf2 <= n) :\n        totalPairs = n // powerOf2;\n        cnt += (totalPairs // 2) * powerOf2;\n        if (totalPairs & 1) :\n            cnt += (n % powerOf2)\n        else :\n            cnt += 0\n        powerOf2 <<= 1;\n    return cnt;\n\n\"\"\"\nFunction to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))\n\n\"\"\"\nPython function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) :\n    i = 1\n    while i*i <= n :\n        j = 1\n        while (j*j <= n) :\n            if (i*i+j*j == n) :\n                return True\n            j = j+1\n        i = i+1\n    return False\n\n\"\"\"\nFunction to find the largest possible value of k such that k modulo x is y.\n\"\"\"\nimport sys\ndef find_max_val(n, x, y):\n    ans = -sys.maxsize\n    for k in range(n + 1):\n        if (k % x == y):\n            ans = max(ans, k)\n    return (ans if (ans >= 0 and\n                    ans <= n) else -1)\n\n\"\"\"\nPython function to find nth bell number.\n\"\"\"\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\"\"\"\nPython function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0;\n    for i in range(1,n + 1):\n        j = 2*i;\n        sum = sum + (j*j*j*j);\n    return sum;\n\n\"\"\"\nPython function to count the number of rotations required to generate a sorted array.\n\"\"\"\ndef count_Rotation(arr, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return 0\n\n\"\"\"\nFunction to extract unique values from the given dictionary values.\n\"\"\"\ndef extract_unique(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res\n\n\"\"\"\nFunction to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nPython function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))\n\n\"\"\"\nFunction to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\n\"\"\"\nFunction to combine two dictionaries by adding values for common keys.\n\"\"\"\nfrom collections import Counter\ndef add_dict(d1,d2):\n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict\n\n\"\"\"\nFunction to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res)\n\n\"\"\"\nFunction to check if the given tuple has any none value or not.\n\"\"\"\ndef check_none(test_tup):\n  res = any(map(lambda ele: ele is None, test_tup))\n  return (res)\n\n\"\"\"\nFunction to access dictionary key\u2019s element by index.\n\"\"\"\ndef access_key(ditionary,key):\n  return list(ditionary)[key]\n\n\"\"\"\nFunction to remove all whitespaces from a string.\n\"\"\"\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\n\n\"\"\"\nFunction to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()\n  return  uniq_items[1]\n\n\"\"\"\nFunction to sum a specific column of a list in a given list of lists.\n\"\"\"\ndef sum_column(list1, C):\n    result = sum(row[C] for row in list1)\n    return result\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nPython function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to return true if the password is valid.\n\"\"\"\nimport re\ndef pass_validity(p):\n x = True\n while x:\n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nFunction to count coin change.\n\"\"\"\ndef coin_change(S, m, n):\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m-1]\n\n\"\"\"\nPython function to find the first odd number in a given list of numbers.\n\"\"\"\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd\n\n\"\"\"\nPython function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B):\n    while (A > 0 and B > 0):\n        A = A / 10;\n        B = B / 10;\n    if (A == 0 and B == 0):\n        return True;\n    return False;\n\n\"\"\"\nFunction to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n\"\"\"\ndef maximum_product(nums):\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n\n\"\"\"\nFunction to generate all sublists of a given list.\n\"\"\"\nfrom itertools import combinations\ndef sub_lists(my_list):\n    subs = []\n    for i in range(0, len(my_list)+1):\n      temp = [list(x) for x in combinations(my_list, i)]\n      if len(temp)>0:\n        subs.extend(temp)\n    return subs\n\n\"\"\"\nFunction to find the occurrence and position of the substrings within a string.\n\"\"\"\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n\n\"\"\"\nFunction to find the median of two sorted arrays of same size.\n\"\"\"\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n\n\"\"\"\nFunction to find ln, m lobb number.\n\"\"\"\ndef binomial_coeff(n, k):\n    C = [[0 for j in range(k + 1)]\n            for i in range(n + 1)]\n    for i in range(0, n + 1):\n        for j in range(0, min(i, k) + 1):\n            if (j == 0 or j == i):\n                C[i][j] = 1\n            else:\n                C[i][j] = (C[i - 1][j - 1]\n                            + C[i - 1][j])\n    return C[n][k]\ndef lobb_num(n, m):\n    return (((2 * m + 1) *\n        binomial_coeff(2 * n, m + n))\n                    / (m + n + 1))\n\n\"\"\"\nFunction to remove the parenthesis area in a string.\n\"\"\"\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\n\n\"\"\"\nPython function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):\n    for i in range (len( s) - 2) :\n        if (s[i] != s[i + 2]) :\n            return False\n    if (s[0] == s[1]):\n        return False\n    return True\n\n\"\"\"\nFunction to caluclate arc length of an angle.\n\"\"\"\ndef arc_length(d,a):\n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength\n\n\"\"\"\nFunction to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef adjac(ele, sub = []):\n  if not ele:\n     yield sub\n  else:\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                for idx in adjac(ele[1:], sub + [j])]\ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)\n\n\"\"\"\nFunction to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n  area=(p*q)/2\n  return area\n\n\"\"\"\nFunction to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\nimport re\ndef road_rd(street):\n  return (re.sub('Road$', 'Rd.', street))\n\n\"\"\"\nFunction to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2):\n    return all(map(list1.__contains__,list2))\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction to convert degrees to radians.\n\"\"\"\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\n\n\"\"\"\nFunction to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\n\"\"\"\nFunction to check if the given expression is balanced or not.\n\"\"\"\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n\n\"\"\"\nFunction to split the given string at uppercase letters by using regex.\n\"\"\"\nimport re\ndef split_list(text):\n  return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction to merge two dictionaries into a single expression.\n\"\"\"\nimport collections as ct\ndef merge_dictionaries(dict1,dict2):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict\n\n\"\"\"\nFunction to calculate the height of the given binary tree.\n\"\"\"\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef max_height(node):\n    if node is None:\n        return 0 ;\n    else :\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if (left_height > right_height):\n            return left_height+1\n        else:\n            return right_height+1\n\n\"\"\"\nPython function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word)%2==0:\n            return True\n        else:\n          return False\n\n\"\"\"\nFunction to find the product of first even and odd number of a given list.\n\"\"\"\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n\n\"\"\"\nFunction to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to find the number which occurs for odd number of times in the given array.\n\"\"\"\ndef get_odd_occurence(arr, arr_size):\n  for i in range(0, arr_size):\n    count = 0\n    for j in range(0, arr_size):\n      if arr[i] == arr[j]:\n        count += 1\n    if (count % 2 != 0):\n      return arr[i]\n  return -1\n\n\"\"\"\nFunction to extract the maximum numeric value from a string by using regex.\n\"\"\"\nimport re\ndef extract_max(input):\n    numbers = re.findall('\\d+',input)\n    numbers = map(int,numbers)\n    return max(numbers)\n\n\"\"\"\nFunction to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1\n\n\"\"\"\nFunction to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n\n\"\"\"\nFunction to convert the given string of integers into a tuple.\n\"\"\"\ndef str_to_tuple(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return (res)\n\n\"\"\"\nPython function to find the first digit in factorial of a given number.\n\"\"\"\nimport math\ndef first_Digit(n) :\n    fact = 1\n    for i in range(2,n + 1) :\n        fact = fact * i\n        while (fact % 10 == 0) :\n            fact = int(fact / 10)\n    while (fact >= 10) :\n        fact = int(fact / 10)\n    return math.floor(fact)\n\n\"\"\"\nFunction to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef last(n):\n   return n[-1]\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)\n\n\"\"\"\nFunction to find the minimum number of elements that should be removed such that amax-amin<=k.\n\"\"\"\ndef find_ind(key, i, n,\n            k, arr):\n    ind = -1\n    start = i + 1\n    end = n - 1;\n    while (start < end):\n        mid = int(start +\n                (end - start) / 2)\n        if (arr[mid] - key <= k):\n            ind = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ind\ndef removals(arr, n, k):\n    ans = n - 1\n    arr.sort()\n    for i in range(0, n):\n        j = find_ind(arr[i], i,\n                    n, k, arr)\n        if (j != -1):\n            ans = min(ans, n -\n                        (j - i + 1))\n    return ans\n\n\"\"\"\nFunction to locate the right insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n\n\"\"\"\nFunction to find whether an array is subset of another array.\n\"\"\"\ndef is_subset(arr1, m, arr2, n):\n    hashset = set()\n    for i in range(0, m):\n        hashset.add(arr1[i])\n    for i in range(0, n):\n        if arr2[i] in hashset:\n            continue\n        else:\n            return False\n    return True\n\n\"\"\"\nFunction to extract year, month and date from a url by using regex.\n\"\"\"\nimport re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "func_error": "count_Rotation", "context_length": 16000, "depth_percentage": 75, "guess": "remove_negs", "is_correct": 0, "accuracy": 6.9}
{"code": "\"\"\"\nPython function to count the total set bits from 1 to n.\n\"\"\"\ndef count_Set_Bits(n) :\n    n += 1;\n    powerOf2 = 2;\n    cnt = n // 2;\n    while (powerOf2 <= n) :\n        totalPairs = n // powerOf2;\n        cnt += (totalPairs // 2) * powerOf2;\n        if (totalPairs & 1) :\n            cnt += (n % powerOf2)\n        else :\n            cnt += 0\n        powerOf2 <<= 1;\n    return cnt;\n\n\"\"\"\nFunction to count those characters which have vowels as their neighbors in the given string.\n\"\"\"\ndef count_vowels(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res)\n\n\"\"\"\nFunction to find the maximum of nth column from the given tuple list.\n\"\"\"\ndef max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res)\n\n\"\"\"\nFunction to find the lateral surface area of a cone.\n\"\"\"\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA\n\n\"\"\"\nPython function to set the right most unset bit.\n\"\"\"\nimport math\ndef get_Pos_Of_Right_most_Set_Bit(n):\n    return int(math.log2(n&-n)+1)\ndef set_Right_most_Unset_Bit(n):\n    if (n == 0):\n        return 1\n    if ((n & (n + 1)) == 0):\n        return n\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)\n    return ((1 << (pos - 1)) | n)\n\n\"\"\"\nFunction to display sign of the chinese zodiac for given year.\n\"\"\"\ndef chinese_zodiac(year):\n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign\n\n\"\"\"\nPython function to find sum of odd factors of a number.\n\"\"\"\nimport math\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3,int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count+=1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res\n\n\"\"\"\nFunction to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n\"\"\"\nMAX=1000;\ndef replace_spaces(string):\n  string=string.strip()\n  i=len(string)\n  space_count=string.count(' ')\n  new_length = i + space_count*2\n  if new_length > MAX:\n    return -1\n  index = new_length-1\n  string=list(string)\n  for f in range(i-2, new_length-2):\n    string.append('0')\n  for j in range(i-1, 0, -1):\n    if string[j] == ' ':\n      string[index] = '0'\n      string[index-1] = '2'\n      string[index-2] = '%'\n      index=index-3\n    else:\n      string[index] = string[j]\n      index -= 1\n  return ''.join(string)\n\n\"\"\"\nPython function to merge the first and last elements separately in a list of lists.\n\"\"\"\ndef merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n\n\"\"\"\nFunction to locate the left insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n\n\"\"\"\nFunction to find palindromes in a given list of strings using lambda function.\n\"\"\"\ndef palindrome_lambda(texts):\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result\n\n\"\"\"\nFunction to sort a given list of strings of numbers numerically.\n\"\"\"\ndef sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n\n\"\"\"\nFunction to find the area of a rombus.\n\"\"\"\ndef rombus_area(p,q):\n  area=(p*q)/2\n  return area\n\n\"\"\"\nFunction to rotate a given list by specified number of items to the right direction.\n\"\"\"\ndef rotate_right(list1,m,n):\n  result =  list1[-(m):]+list1[:-(n)]\n  return result\n\n\"\"\"\nPython function to find the sum of all odd length subarrays.\n\"\"\"\ndef Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum\n\n\"\"\"\nPython function to remove spaces from a given string.\n\"\"\"\ndef remove_spaces(str1):\n  str1 = str1.replace(' ','')\n  return str1\n\n\"\"\"\nFunction to remove everything except alphanumeric characters from the given string by using regex.\n\"\"\"\nimport re\ndef remove_extra_char(text1):\n  pattern = re.compile('[\\W_]+')\n  return (pattern.sub('', text1))\n\n\"\"\"\nPython function to count equal element pairs from the given array.\n\"\"\"\ndef count_Pairs(arr,n):\n    cnt = 0;\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] == arr[j]):\n                cnt += 1;\n    return cnt;\n\n\"\"\"\nFunction to remove multiple spaces in a string.\n\"\"\"\nimport re\ndef remove_spaces(text):\n return (re.sub(' +',' ',text))\n\n\"\"\"\nFunction to find the smallest multiple of the first n numbers.\n\"\"\"\ndef smallest_multiple(n):\n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i\n\n\"\"\"\nPython function to convert the given string to upper case.\n\"\"\"\ndef is_upper(string):\n  return (string.upper())\n\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\n\"\"\"\ndef return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')\n\n\"\"\"\nFunction to extract year, month and date from a url by using regex.\n\"\"\"\nimport re\ndef extract_date(url):\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)\n\n\"\"\"\nFunction to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\"\"\"\ndef maximum_segments(n, a, b, c) :\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(0, n) :\n        if (dp[i] != -1) :\n            if(i + a <= n ):\n                dp[i + a] = max(dp[i] + 1,\n                            dp[i + a])\n            if(i + b <= n ):\n                dp[i + b] = max(dp[i] + 1,\n                            dp[i + b])\n            if(i + c <= n ):\n                dp[i + c] = max(dp[i] + 1,\n                            dp[i + c])\n    return dp[n]\n\n\"\"\"\nPython function to count number of cubes of size k in a cube of size n.\n\"\"\"\ndef No_of_cubes(N,K):\n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No\n\n\"\"\"\nPython function to find sum of prime numbers between 1 to n.\n\"\"\"\ndef sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range (2,n + 1):\n        if(prime[i]):\n            sum += i\n    return sum\n\n\"\"\"\nFunction to replace whitespaces with an underscore and vice versa in a given string by using regex.\n\"\"\"\nimport re\ntext = 'Python Exercises'\ndef replace_spaces(text):\n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)\n\n\"\"\"\nFunction to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n\"\"\"\ndef generate_matrix(n):\n        if n<=0:\n            return []\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix\n\n\"\"\"\nFunction to find maximum of two numbers.\n\"\"\"\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    return y\n\n\"\"\"\nFunction to abbreviate 'road' as 'rd.' in a given string.\n\"\"\"\nimport re\ndef road_rd(street):\n  return (re.sub('Road$', 'Rd.', street))\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b'.\n\"\"\"\nimport re\ndef text_starta_endb(text):\n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to check if the string is a valid email address or not using regex.\n\"\"\"\nimport re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\ndef check_email(email):\n    if(re.search(regex,email)):\n        return (\"Valid Email\")\n    else:\n        return (\"Invalid Email\")\n\n\"\"\"\nFunction to calculate the sum of all digits of the base to the specified power.\n\"\"\"\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n\n\"\"\"\nPython function to check whether all the bits are within a given range or not.\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if (num == new_num):\n        return True\n    return False\n\n\"\"\"\nFunction to find n-th rencontres number.\n\"\"\"\ndef binomial_coeffi(n, k):\n    if (k == 0 or k == n):\n        return 1\n    return (binomial_coeffi(n - 1, k - 1)\n        + binomial_coeffi(n - 1, k))\ndef rencontres_number(n, m):\n    if (n == 0 and m == 0):\n        return 1\n    if (n == 1 and m == 0):\n        return 0\n    if (m == 0):\n        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)))\n    return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))\n\n\"\"\"\nPython function to accept the strings which contains all vowels.\n\"\"\"\ndef check(string):\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5:\n    return ('accepted')\n  else:\n    return (\"not accepted\")\n\n\"\"\"\nPython function to find the sum of an array.\n\"\"\"\ndef _sum(arr):\n    sum=0\n    for i in arr:\n        sum = sum + i\n    return(sum)\n\n\"\"\"\nFunction to iterate over elements repeating each as many times as its count.\n\"\"\"\nfrom collections import Counter\ndef count_variable(a,b,c,d):\n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())\n\n\"\"\"\nPython function to find the cube sum of first n odd natural numbers.\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(0,n) :\n        sum += (2*i+1)*(2*i+1)*(2*i+1)\n    return sum\n\n\"\"\"\nFunction to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n\"\"\"\ndef last(n):\n   return n[-1]\ndef sort_list_last(tuples):\n  return sorted(tuples, key=last)\n\n\"\"\"\nFunction to list out the list of given strings individually using map function.\n\"\"\"\ndef listify_list(list1):\n  result = list(map(list,list1))\n  return result\n\n\"\"\"\nFunction to sort the given tuple list basis the total digits in tuple.\n\"\"\"\ndef count_digs(tup):\n  return sum([len(str(ele)) for ele in tup ])\ndef sort_list(test_list):\n  test_list.sort(key = count_digs)\n  return (str(test_list))\n\n\"\"\"\nFunction to remove the parenthesis area in a string.\n\"\"\"\nimport re\ndef remove_parenthesis(items):\n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))\n\n\"\"\"\nFunction to count repeated items of a tuple.\n\"\"\"\ndef count_tuplex(tuplex,value):\n  count = tuplex.count(value)\n  return count\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n\"\"\"\nimport math\ndef sum_series(number):\n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total\n\n\"\"\"\nPython function to find the sum of fifth power of n natural numbers.\n\"\"\"\ndef fifth_Power_Sum(n) :\n    sm = 0\n    for i in range(1,n+1) :\n        sm = sm + (i*i*i*i*i)\n    return sm\n\n\"\"\"\nFunction to check if the given tuple contains only k elements.\n\"\"\"\ndef check_tuples(test_tuple, K):\n  res = all(ele in K for ele in test_tuple)\n  return (res)\n\n\"\"\"\nFunction to extract the maximum numeric value from a string by using regex.\n\"\"\"\nimport re\ndef extract_max(input):\n    numbers = re.findall('\\d+',input)\n    numbers = map(int,numbers)\n    return max(numbers)\n\n\"\"\"\nFunction to find the area of a trapezium.\n\"\"\"\ndef area_trapezium(base1,base2,height):\n area = 0.5 * (base1 + base2) * height\n return area\n\n\"\"\"\nPython function to find the sum of xor of all pairs of numbers in the given array.\n\"\"\"\ndef pair_OR_Sum(arr,n) :\n    ans = 0\n    for i in range(0,n) :\n        for j in range(i + 1,n) :\n            ans = ans + (arr[i] ^ arr[j])\n    return ans\n\n\"\"\"\nFunction to access the initial and last data of the given tuple record.\n\"\"\"\ndef front_and_rear(test_tup):\n  res = (test_tup[0], test_tup[-1])\n  return (res)\n\n\"\"\"\nPython function to remove negative numbers from a list.\n\"\"\"\ndef remove_negs(num_list):\n    for item in num_list:\n        if item < 0:\n           num_list.remove(item)\n    return num_list\n\n\"\"\"\nFunction to find average value of the numbers in a given tuple of tuples.\n\"\"\"\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or one 'b'.\n\"\"\"\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to remove all tuples with all none values in the given tuple list.\n\"\"\"\ndef remove_tuple(test_list):\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res))\n\n\"\"\"\nFunction to find the minimum difference in the tuple pairs of given tuples.\n\"\"\"\ndef min_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res)\n\n\"\"\"\nFunction to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\"\"\"\nM = 100\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j],\n                        dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n\n\"\"\"\nPython function to check whether the given two arrays are equal or not.\n\"\"\"\ndef are_Equal(arr1,arr2,n,m):\n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True\n\n\"\"\"\nPython function to find the length of the shortest word.\n\"\"\"\ndef len_log(list1):\n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min\n\n\"\"\"\nPython function to check whether the given string is made up of two alternating characters or not.\n\"\"\"\ndef is_Two_Alter(s):\n    for i in range (len( s) - 2) :\n        if (s[i] != s[i + 2]) :\n            return False\n    if (s[0] == s[1]):\n        return False\n    return True\n\n\"\"\"\nFunction to count the frequency of consecutive duplicate elements in a given list of numbers.\n\"\"\"\ndef count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n\n\"\"\"\nFunction to find maximum run of uppercase characters in the given string.\n\"\"\"\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)\n\n\"\"\"\nFunction to check if two lists of tuples are identical or not.\n\"\"\"\ndef check_identical(test_list1, test_list2):\n  res = test_list1 == test_list2\n  return (res)\n\n\"\"\"\nFunction to add all the numbers in a list and divide it with the length of the list.\n\"\"\"\ndef sum_num(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers)\n\n\"\"\"\nFunction to return true if the given number is even else return false.\n\"\"\"\ndef even_num(x):\n  if x%2==0:\n     return True\n  else:\n    return False\n\n\"\"\"\nFunction to calculate the standard deviation.\n\"\"\"\nimport math\nimport sys\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n\n\"\"\"\nPython function to find sum of all prime divisors of a given number.\n\"\"\"\ndef Sum(N):\n    SumOfPrimeDivisors = [0]*(N + 1)\n    for i in range(2,N + 1) :\n        if (SumOfPrimeDivisors[i] == 0) :\n            for j in range(i,N + 1,i) :\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n\n\"\"\"\nFunction to check if any list element is present in the given list.\n\"\"\"\ndef check_element(test_tup, check_list):\n  res = False\n  for ele in check_list:\n    if ele in test_tup:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nFunction to find the fixed point in the given array.\n\"\"\"\ndef find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] is i:\n            return i\n    return -1\n\n\"\"\"\nPython function to shift first element to the end of given list.\n\"\"\"\ndef move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x)\n\n\"\"\"\nFunction that matches a word containing 'z', not at the start or end of the word.\n\"\"\"\nimport re\ndef text_match_wordz_middle(text):\n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to toggle bits of the number except the first and the last bit.\n\"\"\"\ndef set_middle_bits(n):\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return (n >> 1) ^ 1\ndef toggle_middle_bits(n):\n    if (n == 1):\n        return 1\n    return n ^ set_middle_bits(n)\n\n\"\"\"\nFunction to print the first n lucky numbers.\n\"\"\"\ndef lucky_num(n):\n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]\n\n\"\"\"\nFunction to find the maximum sum of subsequences of given array with no adjacent elements.\n\"\"\"\ndef max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n\n\"\"\"\nFunction to push all values into a heap and then pop off the smallest values one at a time.\n\"\"\"\nimport heapq as hq\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n\n\"\"\"\nFunction to find three closest elements from three sorted arrays.\n\"\"\"\nimport sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]));\n        if maximum-minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum;\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i+1\n        elif B[j] == minimum:\n            j = j+1\n        else:\n            k = k+1\n    return A[res_i],B[res_j],C[res_k]\n\n\"\"\"\nPython function to check whether the given two numbers have same number of digits or not.\n\"\"\"\ndef same_Length(A,B):\n    while (A > 0 and B > 0):\n        A = A / 10;\n        B = B / 10;\n    if (A == 0 and B == 0):\n        return True;\n    return False;\n\n\"\"\"\nFunction to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n\"\"\"\ndef sum_positivenum(nums):\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)\n\n\"\"\"\nFunction to perform chunking of tuples each of size n.\n\"\"\"\ndef chunk_tuples(test_tup, N):\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res)\n\n\"\"\"\nFunction to check if the given tuples contain the k or not.\n\"\"\"\ndef check_K(test_tup, K):\n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res)\n\n\"\"\"\nPython function to find the sum of squares of binomial co-efficients.\n\"\"\"\ndef factorial(start,end):\n    res = 1\n    for i in range(start,end + 1):\n        res *= i\n    return res\ndef sum_of_square(n):\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n))\n\n\"\"\"\nPython function to find the first repeated character in a given string.\n\"\"\"\ndef first_repeated_char(str1):\n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c\n  return \"None\"\n\n\"\"\"\nFunction to check a decimal with a precision of 2.\n\"\"\"\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n\n\"\"\"\nFunction to add two integers. however, if the sum is between the given range it will return 20.\n\"\"\"\ndef sum_nums(x, y,m,n):\n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums\n\n\"\"\"\nFunction to check if the given expression is balanced or not.\n\"\"\"\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n\n\"\"\"\nFunction to find the largest subset where each pair is divisible.\n\"\"\"\ndef largest_subset(a, n):\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1;\n    for i in range(n - 2, -1, -1):\n        mxm = 0;\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)\n\n\"\"\"\nFunction to get an item of a tuple.\n\"\"\"\ndef get_item(tup1,index):\n  item = tup1[index]\n  return item\n\n\"\"\"\nPython function to interchange first and last elements in a given list.\n\"\"\"\ndef swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n\"\"\"\nFunction to find all anagrams of a string in a given list of strings using lambda function.\n\"\"\"\nfrom collections import Counter\ndef anagram_lambda(texts,str):\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n  return result\n\n\"\"\"\nPython function to find even numbers from a mixed list.\n\"\"\"\ndef Split(list):\n    ev_li = []\n    for i in list:\n        if (i % 2 == 0):\n            ev_li.append(i)\n    return ev_li\n\n\"\"\"\nPython function to find minimum number swaps required to make two binary strings equal.\n\"\"\"\ndef min_Swaps(s1,s2) :\n    c0 = 0; c1 = 0;\n    for i in range(len(s1)) :\n        if (s1[i] == '0' and s2[i] == '1') :\n            c0 += 1;\n        elif (s1[i] == '1' and s2[i] == '0') :\n            c1 += 1;\n    result = c0 // 2 + c1 // 2;\n    if (c0 % 2 == 0 and c1 % 2 == 0) :\n        return result;\n    elif ((c0 + c1) % 2 == 0) :\n        return result + 2;\n    else :\n        return -1;\n\n\"\"\"\nPython function to find nth bell number.\n\"\"\"\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\"\"\"\nPython function to replace multiple occurence of character by single.\n\"\"\"\nimport re\ndef replace(string, char):\n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string)\n    return string\n\n\"\"\"\nPython function to check whether the product of digits of a number at even and odd places is equal or not.\n\"\"\"\ndef product_Equal(n):\n    if n < 10:\n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n//10\n        if n == 0:\n            break;\n        digit = n % 10\n        prodEven *= digit\n        n = n//10\n    if prodOdd == prodEven:\n        return True\n    return False\n\n\"\"\"\nFunction to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n\"\"\"\ndef sort_dict_item(test_dict):\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res)\n\n\"\"\"\nFunction to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\"\"\"\nimport heapq\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n\n\"\"\"\nPython function to reverse an array upto a given position.\n\"\"\"\ndef reverse_Array_Upto_K(input, k):\n  return (input[k-1::-1] + input[k:])\n\n\"\"\"\nFunction to check whether the given month name contains 31 days or not.\n\"\"\"\ndef check_monthnumb(monthname2):\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to find the kth element in an array containing odd elements first and then even elements.\n\"\"\"\ndef get_Number(n, k):\n    arr = [0] * n;\n    i = 0;\n    odd = 1;\n    while (odd <= n):\n        arr[i] = odd;\n        i += 1;\n        odd += 2;\n    even = 2;\n    while (even <= n):\n        arr[i] = even;\n        i += 1;\n        even += 2;\n    return arr[k - 1];\n\n\"\"\"\nPython function to left rotate the string.\n\"\"\"\ndef left_rotate(s,d):\n    tmp = s[d : ] + s[0 : d]\n    return tmp\n\n\"\"\"\nFunction to convert the given tuple to a key-value dictionary using adjacent elements.\n\"\"\"\ndef tuple_to_dict(test_tup):\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res)\n\n\"\"\"\nFunction to find the n-th power of individual elements in a list using lambda function.\n\"\"\"\ndef nth_nums(nums,n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n\n\"\"\"\nFunction to find numbers within a given range where every number is divisible by every digit it contains.\n\"\"\"\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n\n\"\"\"\n## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\"\"\"\ndef min_jumps(arr, n):\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n-1]\n\n\"\"\"\nFunction to perfom the modulo of tuple elements in the given two tuples.\n\"\"\"\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nPython function to find sum of inverse of divisors.\n\"\"\"\ndef Sum_of_Inverse_Divisors(N,Sum):\n    ans = float(Sum)*1.0 /float(N);\n    return round(ans,2);\n\n\"\"\"\nPython function to get the position of rightmost set bit.\n\"\"\"\nimport math\ndef get_First_Set_Bit_Pos(n):\n     return math.log2(n&-n)+1\n\n\"\"\"\nFunction to find the greatest common divisor (gcd) of two integers by using recursion.\n\"\"\"\ndef recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high%low)\n\n\"\"\"\nFunction to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n\"\"\"\nimport re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n\n\"\"\"\nFunction to find the previous palindrome of a specified number.\n\"\"\"\ndef previous_palindrome(num):\n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x\n\n\"\"\"\nFunction to convert degrees to radians.\n\"\"\"\nimport math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian\n\n\"\"\"\nPython function to find the minimum sum of absolute differences of two arrays.\n\"\"\"\ndef find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort()\n    sum = 0\n    for i in range(n):\n        sum = sum + abs(a[i] - b[i])\n    return sum\n\n\"\"\"\nFunction to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n\"\"\"\ndef series_sum(number):\n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total\n\n\"\"\"\nPython function to find the smallest prime divisor of a number.\n\"\"\"\ndef smallest_Divisor(n):\n    if (n % 2 == 0):\n        return 2;\n    i = 3;\n    while (i*i <= n):\n        if (n % i == 0):\n            return i;\n        i += 2;\n    return n;\n\n\"\"\"\nFunction to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n\"\"\"\ndef sort_by_dnf(arr, n):\n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr\n\n\"\"\"\nFunction to find the largest possible value of k such that k modulo x is y.\n\"\"\"\nimport sys\ndef find_max_val(n, x, y):\n    ans = -sys.maxsize\n    for k in range(n + 1):\n        if (k % x == y):\n            ans = max(ans, k)\n    return (ans if (ans >= 0 and\n                    ans <= n) else -1)\n\n\"\"\"\nFunction to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n\"\"\"\ndef check_greater(test_tup1, test_tup2):\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to solve the fibonacci sequence using recursion.\n\"\"\"\ndef fibonacci(n):\n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))\n\n\"\"\"\nFunction to replace all occurrences of spaces, commas, or dots with a colon.\n\"\"\"\nimport re\ndef replace_specialchar(text):\n return (re.sub(\"[ ,.]\", \":\", text))\n\n\"\"\"\nFunction to check whether the given string is ending with only alphanumeric characters or not using regex.\n\"\"\"\nimport re\nregex = '[a-zA-z0-9]$'\ndef check_alphanumeric(string):\n    if(re.search(regex, string)):\n        return (\"Accept\")\n    else:\n        return (\"Discard\")\n\n\"\"\"\nPython function to check whether the word is present in a given sentence or not.\n\"\"\"\ndef is_Word_Present(sentence,word):\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False\n\n\"\"\"\nFunction to remove all whitespaces from a string.\n\"\"\"\nimport re\ndef remove_all_spaces(text):\n return (re.sub(r'\\s+', '',text))\n\n\"\"\"\nFunction to remove all characters except letters and numbers using regex\n\"\"\"\nimport re\ndef remove_char(S):\n  result = re.sub('[\\W_]+', '', S)\n  return result\n\n\"\"\"\nFunction to sort the given array by using heap sort.\n\"\"\"\ndef heap_sort(arr):\n    heapify(arr)\n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return\n\n\"\"\"\nPython function to print duplicants from a list of integers.\n\"\"\"\ndef Repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated\n\n\"\"\"\nPython function to check whether a sequence of numbers has an increasing trend or not.\n\"\"\"\ndef increasing_trend(nums):\n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to find the index of the first occurrence of a given number in a sorted array.\n\"\"\"\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n\n\"\"\"\nFunction to count alphabets,digits and special charactes in a given string.\n\"\"\"\ndef count_alpha_dig_spl(string):\n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)\n\n\"\"\"\nFunction to re-arrange the given tuples based on the given ordered list.\n\"\"\"\ndef re_arrange_tuples(test_list, ord_list):\n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res)\n\n\"\"\"\nPython function to add a minimum number such that the sum of array becomes even.\n\"\"\"\ndef min_Num(arr,n):\n    odd = 0\n    for i in range(n):\n        if (arr[i] % 2):\n            odd += 1\n    if (odd % 2):\n        return 1\n    return 2\n\n\"\"\"\nFunction to check whether the given month number contains 30 days or not.\n\"\"\"\ndef check_monthnumber_number(monthnum3):\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False\n\n\"\"\"\nPython function to find number of solutions in quadratic equation.\n\"\"\"\ndef Check_Solution(a,b,c) :\n    if ((b*b) - (4*a*c)) > 0 :\n        return (\"2 solutions\")\n    elif ((b*b) - (4*a*c)) == 0 :\n        return (\"1 solution\")\n    else :\n        return (\"No solutions\")\n\n\"\"\"\nFunction to substract the elements of the given nested tuples.\n\"\"\"\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)\n\n\"\"\"\nFunction to concatenate the given two tuples to a nested tuple.\n\"\"\"\ndef concatenate_nested(test_tup1, test_tup2):\n  res = test_tup1 + test_tup2\n  return (res)\n\n\"\"\"\nFunction to count the number of inversions in the given array.\n\"\"\"\ndef get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n\n\"\"\"\nFunction to check if the given integer is a prime number.\n\"\"\"\ndef prime_num(num):\n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False\n\n\"\"\"\nFunction to find out, if the given number is abundant.\n\"\"\"\ndef is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n\n\"\"\"\nFunction that matches a string that has an a followed by three 'b'.\n\"\"\"\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nPython function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n\"\"\"\ndef get_Pairs_Count(arr,n,sum):\n    count = 0\n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n\"\"\"\nPython function to copy a list from a singleton tuple.\n\"\"\"\ndef lcopy(xs):\n  return xs[:]\n\n\"\"\"\nPython function to check whether the given number is a perfect square or not.\n\"\"\"\ndef is_Perfect_Square(n) :\n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True\n        i = i + 1\n    return False\n\n\"\"\"\nFunction to find the second smallest number in a list.\n\"\"\"\ndef second_smallest(numbers):\n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()\n  return  uniq_items[1]\n\n\"\"\"\nFunction to combine two given sorted lists using heapq module.\n\"\"\"\nfrom heapq import merge\ndef combine_lists(num1,num2):\n  combine_lists=list(merge(num1, num2))\n  return combine_lists\n\n\"\"\"\nFunction to remove sublists from a given list of lists, which are outside a given range.\n\"\"\"\ndef remove_list_range(list1, leftrange, rigthrange):\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result\n\n\"\"\"\nFunction to find length of the subarray having maximum sum.\n\"\"\"\nfrom sys import maxsize\ndef max_sub_array_sum(a,size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i+1\n    return (end - start + 1)\n\n\"\"\"\nFunction to multiply two lists using map and lambda function.\n\"\"\"\ndef mul_list(nums1,nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)\n\n\"\"\"\nPython function to find the sum of all odd natural numbers within the range l and r.\n\"\"\"\ndef sum_Odd(n):\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1\ndef sum_in_Range(l,r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n\n\"\"\"\nPython function to multiply all items in the list.\n\"\"\"\ndef multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n\n\"\"\"\nFunction to count the number of unique lists within a list.\n\"\"\"\ndef unique_sublists(list1):\n    result ={}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n\n\"\"\"\nFunction to find nth polite number.\n\"\"\"\nimport math\ndef is_polite(n):\n    n = n + 1\n    return (int)(n+(math.log((n + math.log(n, 2)), 2)))\n\n\"\"\"\nFunction to return true if the password is valid.\n\"\"\"\nimport re\ndef pass_validity(p):\n x = True\n while x:\n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False\n\n\"\"\"\nFunction to find number of even elements in the given list using lambda function.\n\"\"\"\ndef count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even\n\n\"\"\"\nFunction to find the maximum sum that can be formed which has no three consecutive elements present.\n\"\"\"\ndef max_sum_of_three_consecutive(arr, n):\n    sum = [0 for k in range(n)]\n    if n >= 1:\n        sum[0] = arr[0]\n    if n >= 2:\n        sum[1] = arr[0] + arr[1]\n    if n > 2:\n        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    for i in range(3, n):\n        sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n    return sum[n-1]\n\n\"\"\"\nFunction to find length of the string.\n\"\"\"\ndef string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n\"\"\"\nFunction to find the equilibrium index of the given array.\n\"\"\"\ndef equilibrium_index(arr):\n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1\n\n\"\"\"\nPython function to remove even numbers from a given list.\n\"\"\"\ndef remove_even(l):\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n\n\"\"\"\nPython function to find the sum of all even natural numbers within the range l and r.\n\"\"\"\ndef sum_Natural(n):\n    sum = (n * (n + 1))\n    return int(sum)\ndef sum_Even(l,r):\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))\n\n\"\"\"\nFunction to remove all the words with k length in the given string.\n\"\"\"\ndef remove_length(test_str, K):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res)\n\n\"\"\"\nFunction to remove consecutive duplicates of a given list.\n\"\"\"\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n\n\"\"\"\nPython function to check whether every odd index contains odd numbers of a given list.\n\"\"\"\ndef odd_position(nums):\n    return all(nums[i]%2==i%2 for i in range(len(nums)))\n\n\"\"\"\nFunction to check if the triangle is valid or not.\n\"\"\"\ndef validity_triangle(a,b,c):\n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False\n\n\"\"\"\nFunction to check whether the given key is present in the dictionary or not.\n\"\"\"\ndef is_key_present(d,x):\n  if x in d:\n    return True\n  else:\n     return False\n\n\"\"\"\nFunction to find the cumulative sum of all the values that are present in the given tuple list.\n\"\"\"\ndef cummulative_sum(test_list):\n  res = sum(map(sum, test_list))\n  return (res)\n\n\"\"\"\nPython function to check whether the product of numbers is even or not.\n\"\"\"\ndef is_Product_Even(arr,n):\n    for i in range(0,n):\n        if ((arr[i] & 1) == 0):\n            return True\n    return False\n\n\"\"\"\nFunction to remove duplicate words from a given list of strings.\n\"\"\"\ndef remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n\n\"\"\"\nFunction to find the sum of first even and odd number of a given list.\n\"\"\"\ndef sum_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)\n\n\"\"\"\nPython function to count the number of digits in factorial of a given number.\n\"\"\"\nimport math\ndef find_Digits(n):\n    if (n < 0):\n        return 0;\n    if (n <= 1):\n        return 1;\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));\n    return math.floor(x) + 1;\n\n\"\"\"\nPython function to find the smallest missing number from the given array.\n\"\"\"\ndef find_First_Missing(array,start,end):\n    if (start > end):\n        return end + 1\n    if (start != array[start]):\n        return start;\n    mid = int((start + end) / 2)\n    if (array[mid] == mid):\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid)\n\n\"\"\"\nFunction to check if a nested list is a subset of another nested list.\n\"\"\"\ndef check_subset(list1,list2):\n    return all(map(list1.__contains__,list2))\n\n\"\"\"\nPython function to find the sum of fourth power of first n even natural numbers.\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0;\n    for i in range(1,n + 1):\n        j = 2*i;\n        sum = sum + (j*j*j*j);\n    return sum;\n\n\"\"\"\nFunction to locate the right insertion point for a specified value in sorted order.\n\"\"\"\nimport bisect\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n\n\"\"\"\nFunction to multiply the adjacent elements of the given tuple.\n\"\"\"\ndef multiply_elements(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)\n\n\"\"\"\nFunction to check whether the given ip address is valid or not using regex.\n\"\"\"\nimport re\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\ndef check_IP(Ip):\n    if(re.search(regex, Ip)):\n        return (\"Valid IP address\")\n    else:\n        return (\"Invalid IP address\")\n\n\"\"\"\nFunction to find the nth jacobsthal number.\n\"\"\"\ndef jacobsthal_num(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n]\n\n\"\"\"\nFunction to split a string at uppercase letters.\n\"\"\"\nimport re\ndef split_upperstring(text):\n return (re.findall('[A-Z][^A-Z]*', text))\n\n\"\"\"\nFunction which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n\"\"\"\nimport heapq as hq\ndef raw_heap(rawheap):\n  hq.heapify(rawheap)\n  return rawheap\n\n\"\"\"\nFunction to find the nth nonagonal number.\n\"\"\"\ndef is_nonagonal(n):\n    return int(n * (7 * n - 5) / 2)\n\n\"\"\"\nFunction to convert a roman numeral to an integer.\n\"\"\"\ndef roman_to_int(s):\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n\n\"\"\"\nFunction where a string will start with a specific number.\n\"\"\"\nimport re\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to convert camel case string to snake case string.\n\"\"\"\ndef camel_to_snake(text):\n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n\"\"\"\nFunction to find the minimum total path sum in the given triangle.\n\"\"\"\ndef min_sum_path(A):\n    memo = [None] * len(A)\n    n = len(A) - 1\n    for i in range(len(A[n])):\n        memo[i] = A[n][i]\n    for i in range(len(A) - 2, -1,-1):\n        for j in range( len(A[i])):\n            memo[j] = A[i][j] + min(memo[j],\n                                    memo[j + 1])\n    return memo[0]\n\n\"\"\"\nPython function to remove the k'th element from a given list.\n\"\"\"\ndef remove_kth_element(list1, L):\n    return  list1[:L-1] + list1[L:]\n\n\"\"\"\nFunction to check for a number at the end of a string.\n\"\"\"\nimport re\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to print n-times a list using map function.\n\"\"\"\ndef ntimes_list(nums,n):\n    result = map(lambda x:n*x, nums)\n    return list(result)\n\n\"\"\"\nFunction to put spaces between words starting with capital letters in a given string by using regex.\n\"\"\"\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n\n\"\"\"\nFunction to check if the given tuple contains all valid values or not.\n\"\"\"\ndef check_valid(test_tup):\n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res)\n\n\"\"\"\nFunction to sort the tuples alphabetically by the first item of each tuple.\n\"\"\"\ndef sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n-i-1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n\n\"\"\"\nPython function to count the number of lists in a given number of lists.\n\"\"\"\ndef count_list(input_list):\n    return len(input_list)\n\n\"\"\"\nPython function to check whether the count of divisors is even or odd.\n\"\"\"\nimport math\ndef count_Divisors(n) :\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) :\n        if (n % i == 0) :\n            if( n // i == i) :\n                count = count + 1\n            else :\n                count = count + 2\n    if (count % 2 == 0) :\n        return (\"Even\")\n    else :\n        return (\"Odd\")\n\n\"\"\"\nFunction to add the given tuple to the given list.\n\"\"\"\ndef add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return (test_list)\n\n\"\"\"\nPython function to check whether the length of the word is even or not.\n\"\"\"\ndef word_len(s):\n    s = s.split(' ')\n    for word in s:\n        if len(word)%2==0:\n            return True\n        else:\n          return False\n\n\"\"\"\nFunction to count the pairs of reverse strings in the given string list.\n\"\"\"\ndef count_reverse_pairs(test_list):\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(\n    test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))])\n  return str(res)\n\n\"\"\"\nPython function to check for even parity of a given number.\n\"\"\"\ndef check_Even_Parity(x):\n    parity = 0\n    while (x != 0):\n        x = x & (x - 1)\n        parity += 1\n    if (parity % 2 == 0):\n        return True\n    else:\n        return False\n\n\"\"\"\nPython function to check whether the two given strings are isomorphic to each other or not.\n\"\"\"\ndef is_Isomorphic(str1,str2):\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n\n\"\"\"\nFunction to remove duplicate words from a given string using collections module.\n\"\"\"\nfrom collections import OrderedDict\ndef remove_duplicate(string):\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result\n\n\"\"\"\nFunction to multiply consecutive numbers of a given list.\n\"\"\"\ndef mul_consecutive_nums(nums):\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n\n\"\"\"\nPython function to find the minimum number of swaps required to convert one binary string to another.\n\"\"\"\ndef min_Swaps(str1,str2) :\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i] != str2[i] :\n            count += 1\n    if count % 2 == 0 :\n        return (count // 2)\n    else :\n        return (\"Not Possible\")\n\n\"\"\"\nFunction to count number of lists in a given list of lists and square the count.\n\"\"\"\ndef count_list(input_list):\n    return (len(input_list))**2\n\n\"\"\"\nPython function to find maximum possible value for the given periodic function.\n\"\"\"\ndef floor_Max(A,B,N):\n    x = min(B - 1,N)\n    return (A*x) // B\n\n\"\"\"\nFunction to pack consecutive duplicates of a given list elements into sublists.\n\"\"\"\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\n\n\"\"\"\nPython function to check whether the given number can be represented by sum of two squares or not.\n\"\"\"\ndef sum_Square(n) :\n    i = 1\n    while i*i <= n :\n        j = 1\n        while (j*j <= n) :\n            if (i*i+j*j == n) :\n                return True\n            j = j+1\n        i = i+1\n    return False\n\n\"\"\"\nPython function to count the number of equal numbers from three given integers.\n\"\"\"\ndef test_three_equal(x,y,z):\n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))\n\n\"\"\"\nPython function to calculate the product of all the numbers of a given tuple.\n\"\"\"\ndef mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n\n\"\"\"\nPython function to get the last element of each sublist.\n\"\"\"\ndef Extract(lst):\n    return [item[-1] for item in lst]\n\n\"\"\"\nFunction to extract all the adjacent coordinates of the given coordinate tuple.\n\"\"\"\ndef adjac(ele, sub = []):\n  if not ele:\n     yield sub\n  else:\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n                for idx in adjac(ele[1:], sub + [j])]\ndef get_coordinates(test_tup):\n  res = list(adjac(test_tup))\n  return (res)\n\n\"\"\"\nFunction that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n\"\"\"\nimport re\ndef text_match(text):\n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')\n\n\"\"\"\nPython function to find lcm of two positive integers.\n\"\"\"\ndef lcm(x, y):\n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm\n\n\"\"\"\nFunction to count the same pair in two given lists using map function.\n\"\"\"\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n\n\"\"\"\nFunction to find the occurrence and position of the substrings within a string.\n\"\"\"\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n\n\"\"\"\nFunction to caluclate the area of a tetrahedron.\n\"\"\"\nimport math\ndef area_tetrahedron(side):\n  area = math.sqrt(3)*(side*side)\n  return area\n\n\"\"\"\nFunction to find minimum of two numbers.\n\"\"\"\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    return y\n\n\"\"\"\nFunction that matches a string that has an a followed by zero or more b's.\n\"\"\"\nimport re\ndef text_match(text):\n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n\n\"\"\"\nFunction to find a pair with the highest product from a given array of integers.\n\"\"\"\ndef max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    prod1 = max1 * max2\n    prod2 = min1 * min2\n    if prod1 >= prod2:\n        return (max2, max1)\n    else:\n        return (min1, min2)", "func_error": "max_product", "context_length": 16000, "depth_percentage": 100, "guess": "remove_negs", "is_correct": 0, "accuracy": 6.67}
