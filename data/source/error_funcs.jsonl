{"task_id": 603, "generated_code": "def get_ludic(n):\n    ludics = []\n    numbers = list(range(1, n+1))\n    idx = 0\n    while idx < len(numbers):\n        l = numbers[idx]\n        ludics.append(l)\n        numbers = [x for i, x in enumerate(numbers) if (i % l != 0) or (i == idx)]\n        idx += 1\n    return [x for x in ludics if x <= n]\n"}
{"task_id": 609, "generated_code": "def floor_Min(a, b, c):\n    return min((a + b) // 2, (b + c) // 2, (c + a) // 2)"}
{"task_id": 617, "generated_code": "def min_Jumps(a, b, d):\n    if d == 0:\n        return 0\n    max_jump = max(a, b)\n    min_jump = min(a, b)\n    if d == max_jump or d == min_jump:\n        return 1\n    if d < max_jump:\n        return 2\n    q, r = divmod(d, max_jump)\n    if r == 0:\n        return q\n    if r <= min_jump:\n        return q + 0.5\n    return q + 1"}
{"task_id": 626, "generated_code": "def triangle_area(r):\n    if r < 0:\n        return -1\n    if r == 0:\n        return 0\n    return 2 * r * r\n"}
{"task_id": 638, "generated_code": "def wind_chill(wind_speed, temperature):\n    return round(35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16))"}
{"task_id": 642, "generated_code": "def remove_similar_row(matrix):\n    return set(tuple(row) for row in matrix)"}
{"task_id": 652, "generated_code": "def matrix_to_list(matrix):\n    col1 = []\n    col2 = []\n    for row in matrix:\n        for t in row:\n            col1.append(t[0])\n            col2.append(t[1])\n    return str((tuple(col1), tuple(col2)))"}
{"task_id": 660, "generated_code": "def find_Points(l1, r1, l2, r2):\n    if l1 != r2:\n        return (l1, r2)\n    else:\n        return (r1, l2)"}
{"task_id": 692, "generated_code": "def last_Two_Digits(n):\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 6\n    if n == 4:\n        return 24\n    res = 1\n    count_2 = 0\n    count_5 = 0\n    for i in range(2, n + 1):\n        x = i\n        while x % 2 == 0:\n            x //= 2\n            count_2 += 1\n        while x % 5 == 0:\n            x //= 5\n            count_5 += 1\n        res = (res * x) % 100\n    for _ in range(count_2 - count_5):\n        res = (res * 2) % 100\n    return res"}
{"task_id": 704, "generated_code": "def harmonic_sum(n):\n    return sum(1/i for i in range(1, n))"}
{"task_id": 712, "generated_code": "def remove_duplicate(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        key = tuple(item) if isinstance(item, list) else item\n        if key not in seen:\n            seen.add(key)\n            result.append(item)\n    return result"}
{"task_id": 714, "generated_code": "def count_Fac(n):\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1:\n        count += 1\n    return count"}
{"task_id": 717, "generated_code": "def sd_calc(lst):\n    from math import sqrt\n    n = len(lst)\n    mean = sum(lst) / n\n    variance = sum((x - mean) ** 2 for x in lst) / n\n    return sqrt(variance)"}
{"task_id": 738, "generated_code": "def geometric_sum(n):\n    return sum(1 / (2 ** i) for i in range(n))"}
{"task_id": 743, "generated_code": "def rotate_right(lst, n, k):\n    n = n % len(lst) if lst else 0\n    rotated = lst[-n:] + lst[:-n] if n else lst[:]\n    return rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:] if n else rotated[:k] + rotated[k+n:]"}
{"task_id": 746, "generated_code": "def sector_area(r, angle):\n    if angle >= 360:\n        return None\n    from math import pi\n    return (pi * r * r * angle) / 180 / 2"}
{"task_id": 754, "generated_code": "def extract_index_list(a, b, c):\n    res = []\n    for i in range(min(len(a), len(b), len(c))):\n        if a[i] == b[i] == c[i]:\n            res.append(i)\n    return res"}
{"task_id": 761, "generated_code": "def arc_length(radius, angle):\n    if angle < 0 or angle > 360:\n        return None\n    return (angle / 360) * 2 * 3.1414285714285716 * radius"}
{"task_id": 776, "generated_code": "def count_vowels(s):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    n = len(s)\n    for i in range(n):\n        if i > 0 and s[i-1] in vowels:\n            count += 1\n        elif i < n-1 and s[i+1] in vowels:\n            count += 1\n    return count"}
{"task_id": 777, "generated_code": "def find_Sum(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    return sum(x for x in arr if count[x] == 1)"}
{"task_id": 780, "generated_code": "def find_combinations(tuples):\n    result = []\n    n = len(tuples)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            t1 = tuples[i]\n            t2 = tuples[j]\n            result.append((t1[0] + t2[0], t1[1] + t2[1]))\n            result.append((t2[0] + t1[0], t2[1] + t1[1]))\n    return result"}
{"task_id": 793, "generated_code": "def last(arr, x, n):\n    pos = -1\n    for i in range(n):\n        if arr[i] == x:\n            pos = i\n    return pos"}
{"task_id": 799, "generated_code": "def left_Rotate(n, d):\n    num_bits = n.bit_length()\n    d = d % num_bits if num_bits else 0\n    return ((n << d) | (n >> (num_bits - d))) & ((1 << num_bits) - 1) if num_bits else 0"}
{"task_id": 802, "generated_code": "def count_Rotation(arr, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        mid = (low + high) // 2\n        next_idx = (mid + 1) % n\n        prev_idx = (mid - 1 + n) % n\n        if arr[mid] <= arr[next_idx] and arr[mid] <= arr[prev_idx]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return 0"}
{"task_id": 840, "generated_code": "def Check_Solution(a, b, c):\n    if a == 0:\n        return \"No\"\n    D = b * b - 4 * a * c\n    if D < 0:\n        return \"No\"\n    sqrt_D = D ** 0.5\n    r1 = (-b + sqrt_D) / (2 * a)\n    r2 = (-b - sqrt_D) / (2 * a)\n    if abs(r1 + r2) < 1e-8 and abs(abs(r1) - abs(r2)) < 1e-8:\n        return \"Yes\"\n    return \"No\"\n"}
{"task_id": 851, "generated_code": "def Sum_of_Inverse_Divisors(a, b):\n    def sum_inverse_divisors(n):\n        s = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                s += 1/i\n        return s\n    total = 0\n    for x in range(a, b+1):\n        total += sum_inverse_divisors(x)\n    return round(total, 2) if total != int(total) else int(total)"}
{"task_id": 856, "generated_code": "def find_Min_Swaps(arr, n):\n    ones_pos = [i for i, v in enumerate(arr) if v == 1]\n    min_swaps = 0\n    for idx, pos in enumerate(ones_pos):\n        min_swaps += pos - idx\n    return min_swaps"}
{"task_id": 882, "generated_code": "def parallelogram_perimeter(base, side):\n    return 2 * (base + side) * base"}
{"task_id": 890, "generated_code": "def find_Extra(a, b, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid < len(b) and a[mid] == b[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": 899, "generated_code": "def check(arr, n):\n    l, r = 0, n - 1\n    prev = float('-inf')\n    for _ in range(n):\n        if arr[l] <= arr[r]:\n            if arr[l] < prev:\n                return False\n            prev = arr[l]\n            l += 1\n        else:\n            if arr[r] < prev:\n                return False\n            prev = arr[r]\n            r -= 1\n    return True"}
{"task_id": 903, "generated_code": "def count_Unset_Bits(n):\n    def count_set_bits(n):\n        if n == 0:\n            return 0\n        x = n.bit_length() - 1\n        bits_up_to_2x = x * (1 << (x - 1)) if x > 0 else 0\n        msb_2x_to_n = n - (1 << x) + 1\n        rest = count_set_bits(n - (1 << x))\n        return bits_up_to_2x + msb_2x_to_n + rest\n\n    total_bits = n * n.bit_length()\n    set_bits = count_set_bits(n)\n    return total_bits - set_bits\n"}
{"task_id": 910, "generated_code": "def check_date(day, month, year):\n    from datetime import datetime\n    try:\n        d = int(day)\n        m = int(month)\n        y = int(year)\n        datetime(y, m, d)\n        return True\n    except:\n        return False"}
{"task_id": 912, "generated_code": "def int(n, m):\n    from math import comb\n    return comb(2 * n, n + m) * comb(n + m, n) // (n + m + 1)\n"}
{"task_id": 915, "generated_code": "def rearrange_numbs(arr):\n    pos = sorted(filter(lambda x: x > 0, arr))\n    neg = sorted(filter(lambda x: x < 0, arr), reverse=True)\n    return pos + neg"}
{"task_id": 916, "generated_code": "def find_triplet_array(arr, n, target_sum):\n    arr = arr[:n]\n    arr.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif curr_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None"}
{"task_id": 922, "generated_code": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    prod1 = max1 * max2\n    prod2 = min1 * min2\n    if prod1 >= prod2:\n        return (max2, max1)\n    else:\n        return (min1, min2)"}
{"task_id": 939, "generated_code": "def sorted_models(lst):\n    return sorted(lst, key=lambda x: x['make'].lower(), reverse=False) if lst == sorted(lst, key=lambda x: x['make'].lower(), reverse=False) else sorted(lst, key=lambda x: x['make'].lower(), reverse=True)"}
{"task_id": 944, "generated_code": "def num_position(s):\n    for idx, word in enumerate(s.split()):\n        if word.isdigit():\n            return idx + 1\n    return -1"}
{"task_id": 952, "generated_code": "def nCr_mod_p(n, r, p):\n    if r < 0 or r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)\n    numer = 1\n    denom = 1\n    for i in range(r):\n        numer = (numer * (n - i)) % p\n        denom = (denom * (i + 1)) % p\n    def modinv(a, p):\n        return pow(a, p - 2, p)\n    return (numer * modinv(denom, p)) % p"}
{"task_id": 960, "generated_code": "def get_noOfways(n):\n    if n == 0 or n == 1:\n        return 1\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]"}
